dnl Process this file with autoconf to produce a configure script.

dnl Start autoconf with this file.  Not really sure why it needs a filename.
AC_INIT(server/main.cc)

dnl Define this so that we can refer to it twice below
define(PLAYER_VERSION,1.3)

dnl determine system type.  this is used in a couple of places to infer the 
dnl types of arguments to some networking library functions.  if/when we 
dnl upgrade to newer Autotools, this can probably go away.
AC_CANONICAL_SYSTEM
case $host in
*-*-solaris*) AC_DEFINE(PLAYER_SOLARIS,1,[building for Solaris]);;
*-*-linux*) AC_DEFINE(PLAYER_LINUX,1,[building for Linux]);;
esac

AC_DEFINE_UNQUOTED(TARGET_OS, $target_os, [The target OS])

dnl Initialize automake with name and version of package to be built. 
dnl PACKAGE and VERSION will be so defined in <config.h>.
AM_INIT_AUTOMAKE(player,PLAYER_VERSION)

dnl Need AC_PROG_MAKE_SET for recursive building
AC_PROG_MAKE_SET

dnl Generate a configuration header called <config.h> and put all the C
dnl preprocessor defines in there.
dnl
dnl Also create playercommon.h, replacing a couple of C defines with the right
dnl values.  That way, playercommon.h will be installed in a good working
dnl state.
AM_CONFIG_HEADER(config.h server/playercommon.h)

AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB
AC_PROG_INSTALL

dnl where's RTK?
AC_ARG_WITH(rtk, [  --with-rtk=dir          Location of RTK],
RTK_DIR=$with_rtk,
RTK_DIR="${HOME}/librtk-2.1")
AC_SUBST(RTK_DIR)

dnl RTK2 uses libjpeg to export images.
AC_CHECK_HEADER(jpeglib.h,
  AC_DEFINE(HAVE_JPEGLIB_H,1,[include jpeg support])
  LIBJPEG="-ljpeg",,)
AC_SUBST(LIBJPEG)

if test -f $RTK_DIR/include/rtk.h; then
  with_rtk=yes
else
  with_rtk=no
  AC_MSG_WARN([***************************************************])
  AC_MSG_WARN([Couldn't find RTK, so I won't build RTK-based GUIs])
  AC_MSG_WARN([Maybe you should download and install RTK?])
  AC_MSG_WARN([If you have RTK installed, try --with-rtk=path])
  AC_MSG_WARN([***************************************************])
fi
AM_CONDITIONAL(WITH_RTK, test x$with_rtk = xyes)

dnl FreeBSD always invokes Tcl with a version, so i'll pick a reasonable one
case $target in
*-*-freebsd*) AC_CHECK_PROG([TCLPKGFILE], [tclsh8.0], [pkgIndex.tcl], [])
              TCLSH=tclsh8.0;;
*-*-*) AC_CHECK_PROG([TCLPKGFILE], [tclsh], [pkgIndex.tcl], [])
       TCLSH=tclsh;;
esac
AC_SUBST(TCLSH)

dnl Change default installation prefix from /usr/local to user's home
AC_PREFIX_DEFAULT(${HOME}/player-PLAYER_VERSION)

dnl client tests are compiled by default
AC_ARG_WITH(tests, [  --without-tests         Don't build client tests],,
with_tests=yes)
AM_CONDITIONAL(WITH_TESTS, test x$with_tests = xyes)

dnl use the old compiler
AC_ARG_WITH(glibc21, [  --with-glibc21          Use the glibc 2.1 compilers],,
with_glibc21=no)
if test "x$with_glibc21" = "xyes"; then
  CXX=i386-glibc21-linux-g++
  CC=i386-glibc21-linux-gcc
fi

dnl the following drivers will install by default
AC_ARG_WITH(p2os,
[  --without-p2os          Don't compile the p2os drivers],,
with_p2os=yes)
if test "x$with_p2os" = "xyes"; then
  AC_DEFINE(INCLUDE_P2OS, 1, [[include the P2OS driver]])
  P2OS_LIB="libp2os.a"
  P2OS_LIBPATH="drivers/p2os/libp2os.a"
fi
AC_SUBST(P2OS_LIB)
AC_SUBST(P2OS_LIBPATH)


AC_ARG_WITH(sick,
[  --without-sick          Don't compile the sicklms200 driver],,
with_sick=yes)
if test "x$with_sick" = "xyes"; then
  AC_DEFINE(INCLUDE_SICK, 1, [[include the SICK driver]])
  SICK_LIB="libsicklms200.a"
  SICK_LIBPATH="drivers/libsicklms200.a"
fi
AC_SUBST(SICK_LIB)
AC_SUBST(SICK_LIBPATH)

AC_ARG_WITH(acts,
[  --without-acts          Don't compile the acts driver],,
with_acts=yes)
if test "x$with_acts" = "xyes"; then
  AC_DEFINE(INCLUDE_ACTS, 1, [[include the ACTS driver]])
  ACTS_LIB="libacts.a"
  ACTS_LIBPATH="drivers/libacts.a"
fi
AC_SUBST(ACTS_LIB)
AC_SUBST(ACTS_LIBPATH)


AC_ARG_WITH(festival,
[  --without-festival      Don't compile the festival driver],,
with_festival=yes)
if test "x$with_festival" = "xyes"; then
  AC_DEFINE(INCLUDE_FESTIVAL, 1, [[include the FESTIVAL driver]])
  FESTIVAL_LIB="libfestival.a"
  FESTIVAL_LIBPATH="drivers/libfestival.a"
fi
AC_SUBST(FESTIVAL_LIB)
AC_SUBST(FESTIVAL_LIBPATH)

AC_ARG_WITH(sony,
[  --without-sony          Don't compile the sonyevid30 driver],,
with_sony=yes)
if test "x$with_sony" = "xyes"; then
  AC_DEFINE(INCLUDE_SONY, 1, [[include the SONY driver]])
  SONY_LIB="libsonyevid30.a"
  SONY_LIBPATH="drivers/libsonyevid30.a"
fi
AC_SUBST(SONY_LIB)
AC_SUBST(SONY_LIBPATH)

AC_ARG_WITH(stage,
[  --without-stage         Don't compile the stage driver],,
with_stage=yes)
if test "x$with_stage" = "xyes"; then
  AC_DEFINE(INCLUDE_STAGE, 1, [[include the STAGE driver]])
  STAGE_LIB="libstage.a"
  STAGE_LIBPATH="drivers/stage/libstage.a"
fi
AC_SUBST(STAGE_LIB)
AC_SUBST(STAGE_LIBPATH)

AC_ARG_WITH(udpbcast,
[  --without-udpbcast      Don't compile the udpbroadcast driver],,
with_udpbcast=yes)
if test "x$with_udpbcast" = "xyes"; then
  AC_DEFINE(INCLUDE_UDPBCAST, 1, [[include the UDPBCAST driver]])
  UDPBCAST_LIB="libudpbroadcast.a"
  UDPBCAST_LIBPATH="drivers/libudpbroadcast.a"
fi
AC_SUBST(UDPBCAST_LIB)
AC_SUBST(UDPBCAST_LIBPATH)

AC_ARG_WITH(laser,
[  --without-laser         Don't compile the laser-based fiducial drivers],,
with_laser=yes)
if test "x$with_laser" = "xyes"; then
  AC_DEFINE(INCLUDE_LASER, 1, [[include the LASER driver]])
  LASER_LIB="liblasercspace.a liblaserbar.a liblaserbarcode.a liblaservisualbarcode.a"
  LASER_LIBPATH="drivers/liblasercspace.a drivers/liblaserbar.a drivers/liblaserbarcode.a drivers/liblaservisualbarcode.a"
fi
AC_SUBST(LASER_LIB)
AC_SUBST(LASER_LIBPATH)

AC_ARG_WITH(linuxwifi, 
[  --without-linuxwifi     Don't compile the linuxwifi driver],,
with_linuxwifi=yes)
if test "x$with_linuxwifi" = "xyes"; then
  AC_DEFINE(INCLUDE_WIFI, 1, [[include the WiFi driver]])
  LINUXWIFI_LIB="liblinuxwifi.a"
  LINUXWIFI_LIBPATH="drivers/liblinuxwifi.a"
fi
AC_SUBST(LINUXWIFI_LIB)
AC_SUBST(LINUXWIFI_LIBPATH)

dnl the following must use --with to be built
AC_ARG_WITH(reb,
[  --with-reb              Compile the reb drivers],,
with_reb=no)
if test "x$with_reb" = "xyes"; then
  AC_DEFINE(INCLUDE_REB, 1, [[include the REB driver]])
  REB_LIB="libreb.a"
  REB_LIBPATH="drivers/reb/libreb.a"
fi
AC_SUBST(REB_LIB)
AC_SUBST(REB_LIBPATH)


dnl check for the fftw library (by way of one of its headers) and compile
dnl the fixed tones driver if its found
AC_ARG_WITH(fixedtones,
[  --without-fixedtones    Don't compile the fixedtones driver],,
AC_CHECK_HEADER(rfftw.h, with_fixedtones=yes,,))
if test "x$with_fixedtones" = xyes; then
  AC_DEFINE(INCLUDE_FIXEDTONES,1,[include the fixed tones driver])
  FIXEDTONES_LIB="libfixedtones.a"
  FIXEDTONES_LIBPATH="drivers/libfixedtones.a"
  FIXEDTONES_EXTRA_LIB="-lrfftw -lfftw"
fi
AC_SUBST(FIXEDTONES_LIB)
AC_SUBST(FIXEDTONES_LIBPATH)
AC_SUBST(FIXEDTONES_EXTRA_LIB)

dnl check for Mobility (by way of one of its headers) and compile
dnl the RWI driver if it's found
AC_ARG_WITH(rwi,
[  --without-rwi           Don't compile the rwi drivers],,
AC_CHECK_HEADER(mobilitycomponents_i.h, with_rwi=yes,,))
if test "x$with_rwi" = "xyes"; then
  AC_DEFINE(INCLUDE_RWI,1,[include the RWI driver])
  AC_DEFINE(USE_MOBILITY,1,[use the RWI Mobility interface])
  RWI_LIB="librwi.a"
  RWI_LIBPATH="drivers/rwi/librwi.a"
fi
AC_SUBST(RWI_LIB)
AC_SUBST(RWI_LIBPATH)

dnl check for the isense library (by way of one of its headers) and compile
dnl the Intersense drivers if foune.
AC_ARG_WITH(isense,
[  --without-isense        Don't compile the isense drivers],,
AC_CHECK_HEADER(isense/isense.h, with_isense=yes,,))
if test "x$with_isense" = "xyes"; then
  AC_DEFINE(INCLUDE_ISENSE,1,[include the InterSense driver])
  ISENSE_LIB="libisense.a"
  ISENSE_LIBPATH="drivers/isense/libisense.a"
  ISENSE_EXTRA_LIB="-lisense"
fi
AC_SUBST(ISENSE_LIB)
AC_SUBST(ISENSE_LIBPATH)
AC_SUBST(ISENSE_EXTRA_LIB)

dnl optionally compile MicroStrain IMU drivers
AC_ARG_WITH(microstrain,
[  --without-microstrain         Don't compile the MicroStrain IMU drivers],,
with_microstrain=yes)
if test "x$with_microstrain" = "xyes"; then
  AC_DEFINE(INCLUDE_MICROSTRAIN, 1, [[include the MICROSTRAIN driver]])
  MICROSTRAIN_LIB="libmicrostrain.a"
  MICROSTRAIN_LIBPATH="drivers/microstrain/libmicrostrain.a"
fi
AC_SUBST(MICROSTRAIN_LIB)
AC_SUBST(MICROSTRAIN_LIBPATH)

dnl Optionally build the python client.
PYTHON_VERSION=2.2
AC_CHECK_HEADER(python$PYTHON_VERSION/Python.h,with_python=yes,with_python=no)
AM_CONDITIONAL(WITH_PYTHON, test x$with_python = xyes)

dnl Checks for header files.
AC_CHECK_HEADERS(stdint.h strings.h)

dnl Checks for library functions.
AC_REPLACE_FUNCS(scandir poll dirname)
AC_CHECK_FUNCS(cfmakeraw sigblock)
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(socket, connect)
AC_CHECK_LIB(dl, dlopen)
AC_CHECK_LIB(c_r, pthread_create, 
[LIBS="-lc_r -pthread $LIBS"],[LIBS="-lpthread $LIBS"])

AC_SUBST(LIBOBJS)

dnl Create the following Makefiles (from the Makefile.ams)
AC_OUTPUT(Makefile 
          server/Makefile 
          server/drivers/Makefile 
          server/drivers/p2os/Makefile 
          server/drivers/rwi/Makefile 
          server/drivers/stage/Makefile 
          server/drivers/reb/Makefile 
          server/drivers/isense/Makefile 
          server/drivers/microstrain/Makefile 
          client_libs/Makefile 
          client_libs/c/Makefile
          client_libs/c++/Makefile
          client_libs/c++/test/Makefile
          client_libs/libplayerc/Makefile
          client_libs/libplayerc/test/Makefile
          client_libs/libplayerpacket/Makefile
          client_libs/pyplayerc/Makefile
          client_libs/tcl/Makefile
          examples/Makefile
          examples/c++/Makefile
          examples/libplayerc/Makefile
          utils/Makefile
          utils/playerv/Makefile
          utils/tkviewer/Makefile
          utils/playerjoy/Makefile
          config/Makefile)

