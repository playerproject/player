dnl Process this file with autoconf to produce a configure script.

dnl Start autoconf with this file.  Not really sure why it needs a filename.
AC_INIT(server/main.cc)

dnl Define this so that we can refer to it twice below
define(PLAYER_VERSION,1.3)

dnl determine system type.  this is used in a couple of places to infer the 
dnl types of arguments to some networking library functions.  if/when we 
dnl upgrade to newer Autotools, this can probably go away.
AC_CANONICAL_SYSTEM
case $host in
*-*-solaris*) AC_DEFINE(PLAYER_SOLARIS,1,[building for Solaris]);;
*-*-linux*) AC_DEFINE(PLAYER_LINUX,1,[building for Linux]);;
esac

AC_DEFINE_UNQUOTED(TARGET_OS, $target_os, [The target OS])

dnl Initialize automake with name and version of package to be built. 
dnl PACKAGE and VERSION will be so defined in <config.h>.
AM_INIT_AUTOMAKE(player,PLAYER_VERSION)

dnl Need AC_PROG_MAKE_SET for recursive building
AC_PROG_MAKE_SET

dnl Generate a configuration header called <config.h> and put all the C
dnl preprocessor defines in there.
dnl
dnl Also create playercommon.h, replacing a couple of C defines with the right
dnl values.  That way, playercommon.h will be installed in a good working
dnl state.
AM_CONFIG_HEADER(config.h server/playercommon.h)

dnl Find basic tools
AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB
AC_PROG_INSTALL

dnl where's RTK?
AC_ARG_WITH(rtk, [  --with-rtk=dir          Location of RTK],
RTK_DIR=$with_rtk,
RTK_DIR="${HOME}/librtk-2.1")
AC_SUBST(RTK_DIR)

dnl RTK2 uses libjpeg to export images.
AC_CHECK_HEADER(jpeglib.h,
  AC_DEFINE(HAVE_JPEGLIB_H,1,[include jpeg support])
  LIBJPEG="-ljpeg",,)
AC_SUBST(LIBJPEG)

if test -f $RTK_DIR/include/rtk.h; then
  with_rtk=yes
else
  with_rtk=no
  AC_MSG_WARN([***************************************************])
  AC_MSG_WARN([Couldn't find RTK, so I won't build RTK-based GUIs])
  AC_MSG_WARN([Maybe you should download and install RTK?])
  AC_MSG_WARN([If you have RTK installed, try --with-rtk=path])
  AC_MSG_WARN([***************************************************])
fi
AM_CONDITIONAL(WITH_RTK, test x$with_rtk = xyes)

dnl FreeBSD always invokes Tcl with a version, so i'll pick a reasonable one
case $host in
*-*-freebsd*) AC_CHECK_PROG([TCLPKGFILE], [tclsh8.0], [pkgIndex.tcl], [])
              TCLSH=tclsh8.0;;
*-*-*) AC_CHECK_PROG([TCLPKGFILE], [tclsh], [pkgIndex.tcl], [])
       TCLSH=tclsh;;
esac
AC_SUBST(TCLSH)

dnl Change default installation prefix from /usr/local to user's home
AC_PREFIX_DEFAULT(${HOME}/player-PLAYER_VERSION)

dnl client tests are compiled by default
AC_ARG_WITH(tests, [  --without-tests         Don't build client tests],,
with_tests=yes)
AM_CONDITIONAL(WITH_TESTS, test x$with_tests = xyes)

dnl use the old compiler
AC_ARG_WITH(glibc21, [  --with-glibc21          Use the glibc 2.1 compilers],,
with_glibc21=no)
if test "x$with_glibc21" = "xyes"; then
  CXX=i386-glibc21-linux-g++
  CC=i386-glibc21-linux-gcc
fi

dnl Optionally build the python client if the header is available
PYTHON_VERSION=2.2
AC_ARG_WITH(python,
[  --without-python        Don't compile the python client libraries],
with_python=no,
[AC_CHECK_HEADER(python$PYTHON_VERSION/Python.h,with_python=yes,with_python=no)])
AM_CONDITIONAL(WITH_PYTHON, test x$with_python = xyes)


dnl ************************************************************************
dnl The following macros are defined in files hiding in m4.d
dnl ************************************************************************

PLAYER_DRIVERTESTS

dnl ************************************************************************
dnl End of macros from m4.d
dnl ************************************************************************


dnl Checks for header files.
AC_CHECK_HEADERS(stdint.h strings.h)

dnl Test for socklen_t and define it to int if it's not there.
dnl Note that we can't simply dnl use AC_CHECK_TYPE because socklen_t 
dnl isn't in the standard headers (autoconf-2.5 has better methods for this)
AC_MSG_CHECKING(if socklen_t is defined)
AC_TRY_COMPILE(
     [#include <sys/socket.h>],
     [socklen_t len = 42; return len;],
        [AC_MSG_RESULT(yes)],
         [AC_MSG_RESULT(no)
          AC_DEFINE(socklen_t, int, must define this on BSD-based platforms)])

dnl Checks for library functions.
AC_REPLACE_FUNCS(scandir poll dirname)
AC_CHECK_FUNCS(cfmakeraw sigblock)
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(socket, connect)
AC_CHECK_LIB(dl, dlopen)
AC_CHECK_LIB(c_r, pthread_create, 
[LIBS="-lc_r -pthread $LIBS"],[LIBS="-lpthread $LIBS"])

AC_SUBST(LIBOBJS)

dnl Create the following Makefiles (from the Makefile.ams)
AC_OUTPUT(Makefile 
          server/Makefile 
          server/drivers/Makefile 
          server/drivers/mixed/Makefile 
          server/drivers/position/Makefile 
          server/drivers/audio/Makefile 
          server/drivers/fiducial/Makefile 
          server/drivers/ptz/Makefile 
          server/drivers/laser/Makefile 
          server/drivers/waveform/Makefile 
          server/drivers/comms/Makefile 
          server/drivers/blobfinder/Makefile 
          server/drivers/wifi/Makefile 
          server/drivers/speech/Makefile 
          server/drivers/mixed/p2os/Makefile 
          server/drivers/mixed/rwi/Makefile 
          server/drivers/stage/Makefile 
          server/drivers/mixed/reb/Makefile 
          server/drivers/position/isense/Makefile 
          server/drivers/position/microstrain/Makefile 
          client_libs/Makefile 
          client_libs/c/Makefile
          client_libs/c++/Makefile
          client_libs/c++/test/Makefile
          client_libs/libplayerc/Makefile
          client_libs/libplayerc/test/Makefile
          client_libs/libplayerpacket/Makefile
          client_libs/pyplayerc/Makefile
          client_libs/tcl/Makefile
          examples/Makefile
          examples/c++/Makefile
          examples/libplayerc/Makefile
          utils/Makefile
          utils/playerv/Makefile
          utils/tkviewer/Makefile
          utils/playerjoy/Makefile
          config/Makefile)

