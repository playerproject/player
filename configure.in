dnl Process this file with autoconf to produce a configure script.

dnl Start autoconf with this file.  Not really sure why it needs a filename.
AC_INIT(server/main.cc)

AC_CANONICAL_SYSTEM

dnl Define this so that we can refer to it twice below
define(PLAYER_VERSION,1.5)

dnl Initialize automake with name and version of package to be built. 
dnl PACKAGE and VERSION will be so defined in <config.h>.
AM_INIT_AUTOMAKE(player-src,PLAYER_VERSION)

dnl Need AC_PROG_MAKE_SET for recursive building
AC_PROG_MAKE_SET

dnl Generate a configuration header called <config.h> and put all the C
dnl preprocessor defines in there.
dnl
dnl Also create playercommon.h, replacing a couple of C defines with the right
dnl values.  That way, playercommon.h will be installed in a good working
dnl state.
AM_CONFIG_HEADER(config.h server/playercommon.h)


dnl I can't find a way to do @prefix@ substitution in server/prefix.h that
dnl works in more than one version of autotools.  Fix this later.
dnl AM_CONFIG_FILES(server/prefix.h)

dnl Find basic tools
AC_PROG_CC
AC_PROG_CXX
if test ! $GCC = yes -o ! $GXX = yes; then
  AC_MSG_ERROR([Player *requires* gcc and g++ to build.])
fi
AC_PROG_CPP
AC_PROG_INSTALL
AC_C_BIGENDIAN

dnl don't need AC_PROG_RANLIB when using AM_PROG_LIBTOOL
AC_PROG_RANLIB

dnl by default, don't build any shared libs
dnl AC_DISABLE_SHARED
dnl AM_PROG_LIBTOOL

dnl FreeBSD always invokes Tcl with a version, so i'll pick a reasonable one
case $host in
*-*-freebsd*) AC_CHECK_PROG([TCLPKGFILE], [tclsh8.0], [pkgIndex.tcl], [])
              TCLSH=tclsh8.0;;
*-*-*) AC_CHECK_PROG([TCLPKGFILE], [tclsh], [pkgIndex.tcl], [])
       TCLSH=tclsh;;
esac
AC_SUBST(TCLSH)

dnl client tests are compiled by default
AC_ARG_ENABLE(tests,   [  --disable-tests          Don't build client tests],,
enable_tests=yes)
AM_CONDITIONAL(WITH_TESTS, test x$enable_tests = xyes)
AC_ARG_ENABLE(profile, [  --enable-profile        Compile with profiling information (with the -pg and -fprofile-arcs compile flags)],  
    if test "$enableval" = "yes"; then
        CXXFLAGS="$CXXFLAGS -pg -fprofile-arcs"
        CFLAGS="$CFLAGS -pg -fprofile-arcs"
    fi,
)

AC_ARG_ENABLE(optimize, [  --disable-optimize      Compile without optimization (O2) ],
    if test "$enableval" = "yes"; then
        CXXFLAGS="$CXXFLAGS -O2"
        CFLAGS="$CFLAGS -O2"
    elif test "$enableval" = "no"; then
        CXXFLAGS=`echo $CXXFLAGS | sed -e s/-O.//g`
        CFLAGS=`echo $CFLAGS | sed -e s/-O.//g`
    else
        CXXFLAGS="$CXXFLAGS -$enableval"
        CFLAGS="$CFLAGS -$enableval"
    fi, 
)

AC_ARG_ENABLE(debug,    [  --disable-debug         Compile without debugging information (-g)],
    if test "$enableval" = "yes"; then
        CXXFLAGS="$CXXFLAGS -g" 
        CFLAGS="$CFLAGS -g" 
    elif test "$enableval" = "no"; then
        CXXFLAGS=`echo $CXXFLAGS | sed -e s/-g//g`
        CFLAGS=`echo $CFLAGS | sed -e s/-g//g`
    fi, 
) 

dnl use the old compiler
AC_ARG_WITH(glibc21, [  --with-glibc21          Use the glibc 2.1 compilers],,
with_glibc21=no)
if test "x$with_glibc21" = "xyes"; then
  CXX=i386-glibc21-linux-g++
  CC=i386-glibc21-linux-gcc
fi

dnl Optionally build the python client if the header is available
AC_ARG_WITH(python,
[  --without-python        Don't compile the python client libraries],
PYTHON_INTERP=$with_python,
[AC_CHECK_PROG([PYTHON_INTERP],[python],python,no)])
if test x$PYTHON_INTERP = xyes; then
  PYTHON_INTERP=python
fi
if test x$PYTHON_INTERP != xno; then
  with_python=yes
  dnl See whether the += operator is defined in this version of Python
  AC_MSG_CHECKING([Python version])
  if `$PYTHON_INTERP -c "i=0;i+=1;"`; then
    AC_MSG_RESULT([>= 2, good.  Will build Python bindings.])
  else
    AC_MSG_RESULT([< 2, too old (or doesn't work).  Won't build Python bindings.])
    with_python=no
  fi
fi 2>/dev/null
AM_CONDITIONAL(WITH_PYTHON, test "x$with_python" = "xyes")
AC_SUBST(PYTHON_INTERP)

dnl Do we have pkg-config?
AC_CHECK_PROG(have_pkg_config,pkg-config,yes,no)

if test "x$have_pkg_config" = "xno"; then
  AC_MSG_WARN([You should really install pkg-config])
  AC_MSG_WARN([Some components of Player will not be built])
else
  dnl add prefix to the pkg-config path in case RTK, Stage, or Gazebo was
  dnl installed there and the user didn't add it manually 
  export PKG_CONFIG_PATH=$prefix/lib/pkgconfig:$PKG_CONFIG_PATH
fi

dnl ************************************************************************
dnl Start of macros from m4.d
dnl ************************************************************************

dnl Do the standard driver tests (including gazebo)
PLAYER_DRIVERTESTS

dnl Do some additional gazebo tests (may omit some gazebo drivers)
GAZEBO_FIND
if test "x$enable_gazebo" = "xyes"; then
   GAZEBO_DRIVERTESTS
fi

dnl ************************************************************************
dnl End of macros from m4.d
dnl ************************************************************************

dnl Set up GTK/RTK2 for the various GUIs 
dnl we do it before configuring drivers in case they have GUI bits
dnl The logic is: only use pkg-config
AC_ARG_WITH(rtk, [  --without-rtk          Don't build RTK-based GUIs],,
with_rtk=yes)

if test "x$have_pkg_config" = "xno"; then
  AC_MSG_WARN([Can't locate RTK without pkg-config.])
  AC_MSG_WARN([No RTK-based GUIs will be built.])
  with_rtk=no
elif test "x$with_rtk" = "xyes"; then
  dnl pkg-config is available, so we use it	
  AC_MSG_RESULT([pkg-config searching for librtk2.pc in $PKG_CONFIG_PATH]) 

  PKG_CHECK_MODULES(RTK, librtk2 >= 2.2,
    with_rtk=yes
    AC_DEFINE(INCLUDE_RTK2,1,[building optional RTK GUI components]),
    with_rtk=no
    AC_MSG_WARN([no suitable RTK was found])
  )

  dnl Also check for libgnomecanvas and gtk, which some utils 
  dnl (e.g., playernav, playervcr) need
  PKG_CHECK_MODULES(GNOMECANVAS, libgnomecanvas-2.0, 
                    with_gnomecanvas=yes, 
                    with_gnomecanvas=no)
  PKG_CHECK_MODULES(GTK, gtk+-2.0, 
                    with_gtk=yes, 
                    with_gtk=no)
fi
AM_CONDITIONAL(WITH_RTK, test x$with_rtk = xyes)
AM_CONDITIONAL(WITH_GNOMECANVAS, test x$with_gnomecanvas = xyes)
AM_CONDITIONAL(WITH_GTK, test x$with_gtk = xyes)

dnl Include RTK gui support (for debugging)
AC_ARG_ENABLE(rtkgui, 
[  --enable-rtkgui         Include RTK GUI in server (debugging)],, enable_rtkgui=no)
if test "x$with_rtk" = "xyes"; then
  if test "x$enable_rtkgui" = "xyes"; then
    AC_DEFINE(INCLUDE_RTKGUI, 1, [[include the RTK GUI in server (debugging)]])
  fi
else
  enable_rtkgui=no
fi
AM_CONDITIONAL(INCLUDE_RTKGUI, test x$enable_rtkgui = xyes)

# -----------------------------------------------------------------------
# RTK3 and playermap are currently disabled.

#dnl Include RTK3 gui support (used by utilities)
#dnl RTK3 is included in the Player distro.
#AC_ARG_ENABLE(rtk3,
#[  --disable-rtk3          Don't build RTK3-based components],,enable_rtk3=yes)
#dnl Recursively configure RTK3 (if enabled)
#if test "x$have_pkg_config" = "xno"; then
#  AC_MSG_WARN([Can't locate RTK3 without pkg-config.])
#  AC_MSG_WARN([No RTK3-based GUIs will be built.])
#  enable_rtk3=no
#elif test "x$enable_rtk3" = "xyes"; then
#  dnl We go ahead and check rtk3's dependencies here, for two reasons:
#  dnl  (1) so we don't try to build it if they're not met
#  dnl  (2) so we can get the flags necessary to build against it
#  PKG_CHECK_MODULES(LIBGNOMECANVAS, libgnomecanvas-2.0,,enable_rtk3=no)
#  RTK3_CFLAGS=$LIBGNOMECANVAS_CFLAGS
#  RTK3_LIBS=$LIBGNOMECANVAS_LIBS
#fi
#AC_SUBST(RTK3_CFLAGS)
#AC_SUBST(RTK3_LIBS)
#configrtk3=
#if test "x$enable_rtk3" = "xyes"; then
#  configrtk3="rtk3"
#  AC_CONFIG_SUBDIRS(rtk3)
#fi
#dnl AC_CONFIG_SUBDIRS($configrtk3)
#AM_CONDITIONAL(WITH_RTK3, test "x$enable_rtk3" = "xyes")
#
#dnl Build the playermap utility; requires RTK3 components to work
#AC_ARG_ENABLE(playermap,
#[  --enable-playermap          Build PlayerMap],,enable_playermap=yes)
#if test "x$enable_rtk3" != "xyes"; then
#  enable_playermap=no
#fi
#if test "x$PYTHON_INTERP" == "xno"; then
#  enable_playermap=no
#fi
#
#dnl playermap also requires gsl - rtv
#AC_CHECK_HEADER(gsl/gsl_version.h,
#		enable_playermap=yes,
#                enable_playermap=no)
#
#AM_CONDITIONAL(WITH_PLAYERMAP, test "x$enable_playermap" = "xyes")
# -----------------------------------------------------------------------

dnl Checks for header files.
AC_CHECK_HEADERS(stdint.h strings.h sys/soundcard.h sys/filio.h)

dnl Playerjoy needs termio.h
AC_CHECK_HEADER(termio.h, have_termio=yes, have_termio=no)
AM_CONDITIONAL(WITH_PLAYERJOY, test x$have_termio = xyes)

dnl Test for socklen_t and define it to int if it's not there.
dnl Note that we can't simply use AC_CHECK_TYPE because socklen_t 
dnl isn't in the standard headers (autoconf-2.5 has better methods for this)
AC_MSG_CHECKING(if socklen_t is defined)
AC_TRY_COMPILE(
     [#include <sys/types.h>
      #include <sys/socket.h>],
     [socklen_t len = 42; return len;],
        [AC_MSG_RESULT(yes)],
         [AC_MSG_RESULT(no)
          AC_DEFINE(socklen_t, int, must define this on BSD-based platforms)])

dnl Test for O_SYNC and define it to 0 if it's not there (it gets ORed with
dnl flags, so 0 is harmless).
dnl Note that we can't simply use AC_CHECK_TYPE because O_SYNC
dnl isn't in the standard headers (autoconf-2.5 has better methods for this)
AC_MSG_CHECKING(if O_SYNC is defined)
AC_TRY_COMPILE(
     [#include <sys/types.h>
      #include <sys/stat.h>
      #include <fcntl.h>],
     [int fd = open("foo",O_SYNC); return fd;],
        [AC_MSG_RESULT(yes)],
         [AC_MSG_RESULT(no)
          AC_DEFINE(O_SYNC, 0, must define this on some non-Linux platforms)])

dnl big message support
AC_ARG_ENABLE(bigmess, [  --enable-bigmess   Allow big message packets (experimental)],
       AC_DEFINE(PLAYER_BIG_MESSAGES, 1, [allow big message packets (experimental)]),)


dnl Checks for library functions.
AC_REPLACE_FUNCS(scandir poll dirname alphasort)
AC_CHECK_FUNCS(cfmakeraw sigblock)
AC_CHECK_LIB(rt, nanosleep)
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(socket, connect)
AC_CHECK_LIB(dl, dlopen)
AC_CHECK_LIB(c_r, pthread_create, 
             [LIBS="-lc_r -pthread $LIBS"],[LIBS="-lpthread $LIBS"])

dnl Create the following Makefiles (from the Makefile.ams)
AC_OUTPUT(Makefile
          replace/Makefile 
          server/Makefile 
          server/drivers/Makefile 
          server/drivers/gps/Makefile 
          server/drivers/shell/Makefile 
          server/drivers/mixed/Makefile 
          server/drivers/position/Makefile 
          server/drivers/audio/Makefile 
          server/drivers/audiodsp/Makefile
          server/drivers/audiomixer/Makefile
          server/drivers/camera/Makefile 
          server/drivers/camera/v4l/Makefile
          server/drivers/camera/1394/Makefile
          server/drivers/fiducial/Makefile 
          server/drivers/ptz/Makefile 
          server/drivers/laser/Makefile 
          server/drivers/waveform/Makefile 
          server/drivers/comms/Makefile 
          server/drivers/blobfinder/Makefile 
          server/drivers/blobfinder/cmvision/Makefile
          server/drivers/blobfinder/upcbarcode/Makefile
          server/drivers/wifi/Makefile 
          server/drivers/speech/Makefile 
          server/drivers/mixed/cmucam2/Makefile
          server/drivers/mixed/p2os/Makefile 
          server/drivers/mixed/rflex/Makefile 
          server/drivers/mixed/rwi/Makefile 
          server/drivers/mixed/reb/Makefile 
          server/drivers/mixed/khepera/Makefile 
          server/drivers/mixed/rmp/Makefile
          server/drivers/mixed/nomad/Makefile
          server/drivers/mixed/botrics/Makefile
          server/drivers/mixed/clodbuster/Makefile
          server/drivers/mixed/evolution/Makefile
          server/drivers/mixed/evolution/er1/Makefile
          server/drivers/stage/Makefile 
          server/drivers/stageclient/Makefile 
          server/drivers/gazebo/Makefile 
          server/drivers/planner/Makefile 
          server/drivers/planner/wavefront/Makefile 
          server/drivers/position/isense/Makefile 
          server/drivers/position/microstrain/Makefile 
          server/drivers/position/inav/Makefile 
          server/drivers/position/vfh/Makefile 
          server/drivers/position/ascension/Makefile 
          server/drivers/position/bumpersafe/Makefile 
          server/drivers/mcom/Makefile
          server/drivers/localization/Makefile
          server/drivers/localization/amcl/Makefile
          server/drivers/localization/amcl/pf/Makefile
          server/drivers/localization/amcl/map/Makefile
          server/drivers/localization/amcl/models/Makefile
          server/drivers/service_adv/Makefile
          server/drivers/blobfinder/shapetracker/Makefile
          server/drivers/map/Makefile
          client_libs/Makefile 
          client_libs/c/Makefile
          client_libs/c++/Makefile
          client_libs/c++/test/Makefile
          client_libs/libplayerc/Makefile
          client_libs/libplayerc/test/Makefile
          client_libs/libplayerpacket/Makefile
          client_libs/pyplayerc/Makefile
          client_libs/tcl/Makefile
          examples/Makefile
          examples/plugins/Makefile
          examples/plugins/exampledriver/Makefile
          examples/plugins/multidriver/Makefile
          examples/c++/Makefile
          examples/libplayerc/Makefile
          utils/Makefile
          utils/playerv/Makefile
          utils/tkviewer/Makefile
          utils/playerjoy/Makefile
          utils/playernav/Makefile
          utils/playervcr/Makefile
          config/Makefile
          config/stage/Makefile)


# -----------------------------------------------------------------------
# RTK3 and playermap are currently disabled.
#
#          utils/playermap/Makefile
#          utils/playermap/cmodules/Makefile
# -----------------------------------------------------------------------

dnl should use AC_MSG_NOTICE(), but that's apparently not defined in
dnl autoconf 2.13.
AC_MSG_RESULT([])
AC_MSG_RESULT([*************************************************************])
AC_MSG_RESULT([])
AC_MSG_RESULT([Player will be built on a $build system to run])
AC_MSG_RESULT([on a $host system, with the following tools:])
AC_MSG_RESULT([    C   compiler: $CC $CFLAGS])
AC_MSG_RESULT([    C++ compiler: $CXX $CXXFLAGS])
AC_MSG_RESULT([])
if test "x$with_rtk" = "xno"; then
  AC_MSG_RESULT([Player will NOT build RTK-based components.])
  AC_MSG_RESULT([])	
else
  AC_MSG_RESULT([Player will build RTK-based components using:])
  AC_MSG_RESULT([    CPPFLAGS: $RTK_CFLAGS])
  AC_MSG_RESULT([    LDFLAGS: $RTK_LIBS])
  AC_MSG_RESULT([])
fi

# -----------------------------------------------------------------------
# RTK3 and playermap are currently disabled.
#if test "x$enable_rtk3" = "xno"; then
#  AC_MSG_RESULT([Player will NOT build RTK3-based components.])
#  AC_MSG_RESULT([])	
#else
#  AC_MSG_RESULT([Player will build RTK3-based components using:])
#  AC_MSG_RESULT([    CPPFLAGS: $RTK3_CFLAGS])
#  AC_MSG_RESULT([    LDFLAGS: $RTK3_LIBS])
#  AC_MSG_RESULT([])
#fi
# -----------------------------------------------------------------------


if test "x$PYTHON_INTERP" != "xno"; then
   AC_MSG_RESULT([To use the Python bindings, modify your PYTHONPATH variable to include])
   AC_MSG_RESULT([    $prefix/lib/python/\$PYTHON_VERSION/site-packages])
   AC_MSG_RESULT([For example:])
   AC_MSG_RESULT([    export PYTHONPATH=\$PYTHONPATH:$prefix/lib/python/\$PYTHON_VERSION/site-packages])
fi
AC_MSG_RESULT([])

dnl if test "x$enable_playermap" = "xyes"; then
dnl  AC_MSG_RESULT([Playermap will be included])
dnl  AC_MSG_RESULT([])
dnl else
dnl  AC_MSG_RESULT([Playermap will NOT be included])
dnl  AC_MSG_RESULT([])
dnl fi

if test "x$enable_gazebo" = "xyes"; then
  AC_MSG_RESULT([Player will build Gazebo-based components using:])
  AC_MSG_RESULT([    CPPFLAGS: $GAZEBO_EXTRA_CPPFLAGS])
  AC_MSG_RESULT([    LDFLAGS: $GAZEBO_EXTRA_LDFLAGS])
  AC_MSG_RESULT([])
else
  AC_MSG_RESULT([Gazebo support will not be included -- $gazebo_disable_reason])
  AC_MSG_RESULT([])
fi

AC_MSG_RESULT([The following device drivers will be included:])
for player_lib in $PLAYER_DRIVERS; do
  if test -n $player_lib; then
    AC_MSG_RESULT([[+ $player_lib]])
  fi
done
AC_MSG_RESULT([])
AC_MSG_RESULT([The following device drivers will NOT be included:])
dnl Change the internal field seperator (IFS) to be a colon, so that the
dnl driver list will be parsed correctly.
old_IFS=$IFS
IFS=:
for player_lib in $PLAYER_NODRIVERS; do
  if test ! $player_lib = "" ; then
    AC_MSG_RESULT([[- $player_lib]])
  fi
done
dnl Change the IFS back to what it was.
IFS=$old_IFS
AC_MSG_RESULT([])
AC_MSG_RESULT([Player will be installed in:])
AC_MSG_RESULT([    $prefix/])
AC_MSG_RESULT([])
AC_MSG_RESULT([To see the configuration options, do:])
AC_MSG_RESULT([    ./configure --help])
AC_MSG_RESULT([])
AC_MSG_RESULT([When you're satisfied with the configuration, type 'make install'. ])
AC_MSG_RESULT([])
