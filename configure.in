dnl Process this file with autoconf to produce a configure script.

dnl Start autoconf with this file.  Not really sure why it needs a filename.
AC_INIT(server/main.cc)

dnl Define this so that we can refer to it twice below
define(PLAYER_VERSION,1.3)

dnl determine system type.  this is used in a couple of places to infer the 
dnl types of arguments to some networking library functions.  if/when we 
dnl upgrade to newer Autotools, this can probably go away.
AC_CANONICAL_SYSTEM
case $target in
*-*-solaris*) AC_DEFINE(PLAYER_SOLARIS,1,[building for Solaris]);;
*-*-linux*) AC_DEFINE(PLAYER_LINUX,1,[building for Linux]);;
esac

AC_DEFINE_UNQUOTED(TARGET_OS, $target_os, [The target OS])

dnl Initialize automake with name and version of package to be built. 
dnl PACKAGE and VERSION will be so defined in <config.h>.
AM_INIT_AUTOMAKE(player,PLAYER_VERSION)

dnl Need AC_PROG_MAKE_SET for recursive building
AC_PROG_MAKE_SET


dnl Generate a configuration header called <config.h> and put all the C
dnl preprocessor defines in there
AM_CONFIG_HEADER(config.h)


AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB
AC_PROG_INSTALL
case $target in
*-*-freebsd*) AC_CHECK_PROG([TCLPKGFILE], [tclsh8.0], [pkgIndex.tcl], [])
              TCLSH=tclsh8.0;;
*-*-*) AC_CHECK_PROG([TCLPKGFILE], [tclsh], [pkgIndex.tcl], [])
       TCLSH=tclsh;;
esac
AC_SUBST(TCLSH)

dnl Change default installation prefix from /usr/local to user's home
AC_PREFIX_DEFAULT(${HOME}/player-PLAYER_VERSION)




dnl should we include the RTK GUI?
AC_ARG_WITH(gui,    [  --without-gui           Don't include the GUI],,
with_gui=yes)
if test "x$with_gui" = "xyes"; then
  AC_DEFINE(INCLUDE_RTK2,1,[include the RTK GUI])
fi
AM_CONDITIONAL(WITH_GUI, test x$with_gui = xyes)

dnl client tests are not compiled unless the user asks for them
AC_ARG_WITH(tests, [  --with-tests            Build tests],,
with_tests=yes)
AM_CONDITIONAL(WITH_TESTS, test x$with_tests = xyes)

dnl use the old compiler
AC_ARG_WITH(glibc21, [  --with-glibc21          Use the glibc 2.1 compilers],,
with_glibc21=no)
if test "x$with_glibc21" = "xyes"; then
  CXX=i386-glibc21-linux-g++
  CC=i386-glibc21-linux-gcc
fi

dnl check for which the architecture of the server we are making
CXX_SERVER=$CXX
CXXFLAGS_SERVER=$CXXFLAGS
AR_SERVER="ar"
RANLIB_SERVER=$RANLIB

AC_ARG_WITH(server-arch,
[  --with-server-arch=arm     Make the server for ARM (using LART)],
[case "${withval}" in
   arm)  AC_MSG_CHECKING([whether the LART ARM cross compiler is supported])
         if test -d /data/lart/cross; then
	   AC_MSG_RESULT([yes])
           CXX_SERVER="arm-linux-g++"
 	   AR_SERVER="arm-linux-ar"
           CXXFLAGS_SERVER=""
           RANLIB_SERVER="arm-linux-ranlib"
	 else
	   AC_MSG_RESULT([no])
	   AC_MSG_ERROR([Environment not set up for the LART compiler. Quitting.])
         fi ;;
     *) AC_MSG_ERROR([unknown architecture type $withval]) ;;
esac],
[])
AC_SUBST(REB_LIBPATH)
AC_SUBST(CXX_SERVER)
AC_SUBST(AR_SERVER)
AC_SUBST(CXXFLAGS_SERVER)
AC_SUBST(RANLIB_SERVER)

dnl the following drivers will install by default
P2OS_LIB="libp2os.a"
P2OS_LIBPATH="drivers/p2os/libp2os.a"
AC_ARG_WITH(p2os,
[  --with-p2os                Use the P2OS],
[case "${withval}" in 
 yes) AC_DEFINE(INCLUDE_P2OS, 1, [[include the P2OS driver]])
      ;;
 no) P2OS_LIB=""
     P2OS_LIBPATH=""
     ;;
 esac],
[AC_DEFINE(INCLUDE_P2OS, 1, [[include the P2OS driver]])])
AC_SUBST(P2OS_LIB)
AC_SUBST(P2OS_LIBPATH)


SICK_LIB="libsicklms200.a"
SICK_LIBPATH="drivers/libsicklms200.a"
AC_ARG_WITH(sick,
[  --with-sick                Use the SICK],
[case "${withval}" in 
 yes) AC_DEFINE(INCLUDE_SICK, 1, [[include the SICK driver]])
      ;;
 no) SICK_LIB=""
     SICK_LIBPATH=""
     ;;
 esac],
[AC_DEFINE(INCLUDE_SICK, 1, [[include the SICK driver]])])
AC_SUBST(SICK_LIB)
AC_SUBST(SICK_LIBPATH)


ACTS_LIB="libacts.a"
ACTS_LIBPATH="drivers/libacts.a"
AC_ARG_WITH(acts,
[  --with-acts                Use the ACTS],
[case "${withval}" in 
 yes) AC_DEFINE(INCLUDE_ACTS, 1, [[include the ACTS driver]])
      ;;
 no) ACTS_LIB=""
     ACTS_LIBPATH=""
     ;;
 esac],
[AC_DEFINE(INCLUDE_ACTS, 1, [[include the ACTS driver]])])
AC_SUBST(ACTS_LIB)
AC_SUBST(ACTS_LIBPATH)


FESTIVAL_LIB="libfestival.a"
FESTIVAL_LIBPATH="drivers/libfestival.a"
AC_ARG_WITH(festival,
[  --with-festival                Use the FESTIVAL],
[case "${withval}" in 
 yes) AC_DEFINE(INCLUDE_FESTIVAL, 1, [[include the FESTIVAL driver]])
      ;;
 no) FESTIVAL_LIB=""
     FESTIVAL_LIBPATH=""
     ;;
 esac],
[AC_DEFINE(INCLUDE_FESTIVAL, 1, [[include the FESTIVAL driver]])])
AC_SUBST(FESTIVAL_LIB)
AC_SUBST(FESTIVAL_LIBPATH)


SONY_LIB="libsonyevid30.a"
SONY_LIBPATH="drivers/libsonyevid30.a"
AC_ARG_WITH(sony,
[  --with-sony                Use the SONY],
[case "${withval}" in 
 yes) AC_DEFINE(INCLUDE_SONY, 1, [[include the SONY driver]])
      ;;
 no) SONY_LIB=""
     SONY_LIBPATH=""
     ;;
 esac],
[AC_DEFINE(INCLUDE_SONY, 1, [[include the SONY driver]])])
AC_SUBST(SONY_LIB)
AC_SUBST(SONY_LIBPATH)


UDPBCAST_LIB="libudpbroadcast.a"
UDPBCAST_LIBPATH="drivers/libudpbroadcast.a"
AC_ARG_WITH(udpbcast,
[  --with-udpbcast                Use the UDPBCAST],
[case "${withval}" in 
 yes) AC_DEFINE(INCLUDE_UDPBCAST, 1, [[include the UDPBCAST driver]])
      ;;
 no) UDPBCAST_LIB=""
     UDPBCAST_LIBPATH=""
     ;;
 esac],
[AC_DEFINE(INCLUDE_UDPBCAST, 1, [[include the UDPBCAST driver]])])
AC_SUBST(UDPBCAST_LIB)
AC_SUBST(UDPBCAST_LIBPATH)


LASER_LIB="liblaserreflector.a liblaserbarcode.a liblaservisualbarcode.a liblasercspace.a"
LASER_LIBPATH="drivers/liblaserreflector.a drivers/liblaserbarcode.a drivers/liblaservisualbarcode.a drivers/liblasercspace.a"
AC_ARG_WITH(laser,
[  --with-laser                Use the LASER],
[case "${withval}" in 
 yes) AC_DEFINE(INCLUDE_LASER, 1, [[include the LASER driver]])
      ;;
 no) LASER_LIB=""
     LASER_LIBPATH=""
     ;;
 esac],
[AC_DEFINE(INCLUDE_LASER, 1, [[include the LASER driver]])])
AC_SUBST(LASER_LIB)
AC_SUBST(LASER_LIBPATH)

WIFI_LIB="libwifi.a"
WIFI_LIBPATH="drivers/libwifi.a"
AC_ARG_WITH(wifi, 
[  --with-wifi                Use the WiFi driver],
[case "${withval}" in
 yes) AC_DEFINE(INCLUDE_WIFI, 1, [[include the WiFi driver]])
      ;;
  no) WIFI_LIB=""
      WIFI_LIBPATH=""
      ;;
 esac],
[AC_DEFINE(INCLUDE_WIFI, 1, [[include the WiFi driver]])])
AC_SUBST(WIFI_LIB)
AC_SUBST(WIFI_LIBPATH)

dnl the following must use --with to be built
AC_ARG_WITH(reb,
[  --with-reb                Use the REB],
[case "${withval}" in 
 yes) AC_DEFINE(INCLUDE_REB, 1, [[include the REB driver]])
      REB_LIB="libreb.a"
      REB_LIBPATH="drivers/reb/libreb.a"
      ;;
  no) ;;
   *) ;;
 esac],
[])
AC_SUBST(REB_LIB)
AC_SUBST(REB_LIBPATH)


dnl check for the fftw library (by way of one of its headers) and compile
dnl the fixed tones driver if its found
AC_CHECK_HEADER(rfftw.h, 
  AC_DEFINE(INCLUDE_FIXEDTONES,1,[include the fixed tones driver])
  FIXEDTONES_LIB="libfixedtones.a"
  FIXEDTONES_LIBPATH="drivers/libfixedtones.a"
  FIXEDTONES_EXTRA_LIB="-lrfftw -lfftw",,)
AC_SUBST(FIXEDTONES_LIB)
AC_SUBST(FIXEDTONES_LIBPATH)
AC_SUBST(FIXEDTONES_EXTRA_LIB)

dnl check for Mobility (by way of one of its headers) and compile
dnl the RWI driver if it's found
AC_CHECK_HEADER(mobilitycomponents_i.h,
  AC_DEFINE(INCLUDE_RWI,1,[include the RWI driver])
  AC_DEFINE(USE_MOBILITY,1,[use the RWI Mobility interface])
  RWI_LIB="librwi.a"
  RWI_LIBPATH="drivers/rwi/librwi.a",,)
AC_SUBST(RWI_LIB)
AC_SUBST(RWI_LIBPATH)

dnl check for the isense library (by way of one of its headers) and compile
dnl the Intersense drivers if foune.
AC_CHECK_HEADER(isense/isense.h, 
  AC_DEFINE(INCLUDE_ISENSE,1,[include the InterSense driver])
  ISENSE_LIB="libisense.a"
  ISENSE_LIBPATH="drivers/isense/libisense.a"
  ISENSE_EXTRA_LIB="-lisense",,)
AC_SUBST(ISENSE_LIB)
AC_SUBST(ISENSE_LIBPATH)
AC_SUBST(ISENSE_EXTRA_LIB)

dnl RTK2 uses libjpeg to export images.
AC_CHECK_HEADER(jpeglib.h,
  AC_DEFINE(HAVE_JPEGLIB_H,1,[include jpeg support])
  LIBJPEG="-ljpeg",,)
AC_SUBST(LIBJPEG)

dnl Optionally build the python client.
PYTHON_VERSION=2.2
AC_CHECK_HEADER(python$PYTHON_VERSION/Python.h,
  with_python=yes,with_python=no,)
AM_CONDITIONAL(WITH_PYTHON, test x$with_python = xyes)
AC_SUBST(PYTHON_VERSION)

dnl Checks for header files.
AC_CHECK_HEADERS(stdint.h sys/types.h strings.h)
#AC_HEADER_STDC
#AC_CHECK_HEADERS(fcntl.h limits.h strings.h sys/file.h sys/ioctl.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
#AC_TYPE_OFF_T
#AC_TYPE_SIZE_T
#AC_HEADER_TIME

dnl Checks for library functions.
AC_REPLACE_FUNCS(scandir poll dirname)
AC_CHECK_FUNCS(cfmakeraw sigblock)
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(socket, connect)
AC_CHECK_LIB(rt, sem_wait)
AC_CHECK_LIB(posix4, sem_wait)
AC_CHECK_LIB(dl, dlopen)
AC_CHECK_LIB(c_r, pthread_create, 
[LIBS="-lc_r -pthread $LIBS"],[LIBS="-lpthread $LIBS"])
#AC_FUNC_MMAP
#AC_FUNC_SETPGRP
#AC_TYPE_SIGNAL
#AC_CHECK_FUNCS(getcwd gethostname gettimeofday socket strdup strerror)

AC_SUBST(LIBOBJS)

dnl Create the following Makefiles (from the Makefile.ams)
AC_OUTPUT(Makefile 
          server/Makefile 
          server/drivers/Makefile 
          server/drivers/p2os/Makefile 
          server/drivers/rwi/Makefile 
          server/drivers/isense/Makefile 
          server/drivers/stage/Makefile 
          server/drivers/reb/Makefile 
          client_libs/Makefile 
          client_libs/c/Makefile
          client_libs/c++/Makefile
          client_libs/c++/test/Makefile
          client_libs/libplayerc/Makefile
          client_libs/libplayerc/test/Makefile
          client_libs/pyplayerc/Makefile
          client_libs/tcl/Makefile
          examples/Makefile
          examples/c++/Makefile
          examples/libplayerc/Makefile
          rtk2/Makefile
          rtk2/test/Makefile
          utils/Makefile
          utils/playerv/Makefile
          utils/tkviewer/Makefile
          utils/playerjoy/Makefile
          config/Makefile)





