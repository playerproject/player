dnl Process this file with autoconf to produce a configure script.

dnl Start autoconf with this file.  Not really sure why it needs a filename.
AC_INIT(server/main.cc)

dnl Need AC_PROG_MAKE_SET for recursive building
AC_PROG_MAKE_SET

dnl Define this so that we can refer to it twice below
define(PLAYER_VERSION,1.3)

dnl Generate a configuration header called <config.h> and put all the C
dnl preprocessor defines in there
AM_CONFIG_HEADER(config.h)

dnl Initialize automake with name and version of package to be built. 
dnl PACKAGE and VERSION will be so defined in <config.h>.
AM_INIT_AUTOMAKE(player,PLAYER_VERSION)

dnl Change default installation prefix from /usr/local to user's home
AC_PREFIX_DEFAULT(${HOME}/player-PLAYER_VERSION)

dnl Define the options of type --with-foo that configure should accept,
dnl along with defaults.  These options are mostly used to include/exclude 
dnl device drivers.
AC_ARG_WITH(festival, [  --without-festival          Do not include Festival driver],,
with_festival=yes)
if test "x$with_festival" = "xyes"; then
  FESTIVAL_LIB="drivers/libfestival.a"
  AC_DEFINE(INCLUDE_FESTIVAL,1,[include the Festival driver])
fi
AC_SUBST(FESTIVAL_LIB)

AC_ARG_WITH(sicklms200, [  --without-sicklms200          Do not include SICK LMS 200 driver],,
with_sicklms200=yes)
if test "x$with_sicklms200" = "xyes"; then
  SICKLMS200_LIB="drivers/libsicklms200.a"
  AC_DEFINE(INCLUDE_SICKLMS200,1,[include the SICK LMS 200 driver])
fi
AC_SUBST(SICKLMS200_LIB)

AC_ARG_WITH(acts, [  --without-acts          Do not include ACTS driver],,
with_acts=yes)
if test "x$with_acts" = "xyes"; then
  ACTS_LIB="drivers/libacts.a"
  AC_DEFINE(INCLUDE_ACTS,1,[include the ACTS driver])
fi
AC_SUBST(ACTS_LIB)

AC_ARG_WITH(sonyevid30, [  --without-sonyevid30          Do not include Sony EVID 30 driver],,
with_sonyevid30=yes)
if test "x$with_sonyevid30" = "xyes"; then
  SONYEVID30_LIB="drivers/libsonyevid30.a"
  AC_DEFINE(INCLUDE_SONYEVID30,1,[include the Sony EVID 30 driver])
fi
AC_SUBST(SONYEVID30_LIB)

AC_ARG_WITH(p2os, [  --without-p2os          Do not include P2OS driver],,
with_p2os=yes)
if test "x$with_p2os" = "xyes"; then
  P2OS_LIB="drivers/p2os/libp2os.a"
  AC_DEFINE(INCLUDE_P2OS,1,[include the P2OS driver])
fi
AC_SUBST(P2OS_LIB)

AC_ARG_WITH(udpbroadcast, [  --without-udpbroadcast          Do not include UDP broadcast driver],,
with_udpbroadcast=yes)
if test "x$with_udpbroadcast" = "xyes"; then
  UDPBROADCAST_LIB="drivers/libudpbroadcast.a"
  AC_DEFINE(INCLUDE_UDPBROADCAST,1,[include the UDP broadcast driver])
fi
AC_SUBST(UDPBROADCAST_LIB)

AC_ARG_WITH(laserbarcode, [  --without-laserbarcode          Do not include laser barcode driver],,
with_laserbarcode=yes)
if test "x$with_laserbarcode" = "xyes"; then
  LASERBARCODE_LIB="drivers/liblaserbarcode.a"
  AC_DEFINE(INCLUDE_LASERBARCODE,1,[include the laser barcode driver])
fi
AC_SUBST(LASERBARCODE_LIB)

AC_ARG_WITH(stage, [  --without-stage          Do not include stage driver],,
with_stage=yes)
if test "x$with_stage" = "xyes"; then
  STAGE_LIB="drivers/stage/libstage.a"
  AC_DEFINE(INCLUDE_STAGE,1,[include the stage driver])
fi
AC_SUBST(STAGE_LIB)

AC_ARG_WITH(rwi, [  --with-rwi          Include RWI driver],,
with_rwi=no)
if test "x$with_rwi" = "xyes"; then
  RWI_OBJ="rwi_bumperdevice.o rwidevice.o rwi_laserdevice.o rwi_positiondevice.o rwi_powerdevice.o rwi_sonardevice.o"
  AC_DEFINE(INCLUDE_RWI,1,[include the RWI driver])
  AC_DEFINE(USE_MOBILITY,1,[use the RWI Mobility interface])
fi
AC_SUBST(RWI_OBJ)

AC_ARG_WITH(tests, [  --with-tests          Build tests],,
with_tests=no)
AM_CONDITIONAL(WITH_TESTS, test x$with_tests = xyes)

dnl below here are the old ones that haven't been changed
#AC_ARG_WITH(audio, [  --with-audio          Include audio driver],,
#with_audio=no)
#if test "x$with_audio" = "xyes"; then
  #AUDIO_OBJ="audiodevice.o"
  #AC_DEFINE(INCLUDE_AUDIO,1,[include the audio driver])
#fi
#AC_SUBST(AUDIO_OBJ)

#AC_ARG_WITH(bps, [  --without-bps          Do not include bps driver],,
#with_bps=yes)
#if test "x$with_bps" = "xyes"; then
  #BPS_OBJ="bpsdevice.o"
  #AC_DEFINE(INCLUDE_BPS,1,[include the bps driver])
#fi
#AC_SUBST(BPS_OBJ)


dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB
AC_PROG_INSTALL

dnl Checks for header files.
#AC_HEADER_DIRENT
#AC_HEADER_STDC
#AC_CHECK_HEADERS(fcntl.h limits.h strings.h sys/file.h sys/ioctl.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
#AC_TYPE_OFF_T
#AC_TYPE_SIZE_T
#AC_HEADER_TIME

dnl Checks for library functions.
#AC_FUNC_MMAP
#AC_FUNC_SETPGRP
#AC_TYPE_SIGNAL
#AC_CHECK_FUNCS(getcwd gethostname gettimeofday socket strdup strerror)

dnl Create the following Makefiles (from the Makefile.ams)
AC_OUTPUT(Makefile 
          server/Makefile 
          server/drivers/Makefile 
          server/drivers/p2os/Makefile 
          server/drivers/rwi/Makefile 
          server/drivers/stage/Makefile 
          client_libs/Makefile 
          client_libs/c/Makefile
          client_libs/c++/Makefile
          client_libs/c++/test/Makefile
          client_libs/libplayerc/Makefile
          client_libs/libplayerc/test/Makefile
          client_libs/tcl/Makefile
          examples/Makefile
          examples/c/Makefile
          examples/c++/Makefile
          examples/libplayerc/Makefile
          rtk2/Makefile
          utils/Makefile
          utils/playerv/Makefile
          utils/tkviewer/Makefile)
