dnl Process this file with autoconf to produce a configure script.

dnl Start autoconf with this file.  Not really sure why it needs a filename.
AC_INIT(server/main.cc)

AC_CANONICAL_SYSTEM

dnl Define this so that we can refer to it twice below
define(PLAYER_VERSION,1.4)

dnl Initialize automake with name and version of package to be built. 
dnl PACKAGE and VERSION will be so defined in <config.h>.
AM_INIT_AUTOMAKE(player-src,PLAYER_VERSION)

dnl Need AC_PROG_MAKE_SET for recursive building
AC_PROG_MAKE_SET

dnl Generate a configuration header called <config.h> and put all the C
dnl preprocessor defines in there.
dnl
dnl Also create playercommon.h, replacing a couple of C defines with the right
dnl values.  That way, playercommon.h will be installed in a good working
dnl state.
AM_CONFIG_HEADER(config.h server/playercommon.h)

dnl Find basic tools
AC_PROG_CC
AC_PROG_CXX
if test ! $GCC = yes -o ! $GXX = yes; then
  AC_MSG_ERROR([Player *requires* gcc and g++ to build.])
fi
AC_PROG_CPP
AC_PROG_INSTALL
AC_C_BIGENDIAN

dnl don't need AC_PROG_RANLIB when using AM_PROG_LIBTOOL
AC_PROG_RANLIB

dnl by default, don't build any shared libs
dnl AC_DISABLE_SHARED
dnl AM_PROG_LIBTOOL

dnl where's RTK?
AC_ARG_WITH(rtk, [  --with-rtk=dir          Location of RTK],
RTK_DIR=$with_rtk,
RTK_DIR=$prefix)
AC_SUBST(RTK_DIR)

dnl RTK2 uses libjpeg to export images.
AC_CHECK_HEADER(jpeglib.h,
  AC_DEFINE(HAVE_JPEGLIB_H,1,[include jpeg support])
  LIBJPEG="-ljpeg",,)
AC_SUBST(LIBJPEG)

AC_MSG_CHECKING(for rtk.h)
if test -f $RTK_DIR/include/rtk.h; then
  with_rtk=yes
  AC_MSG_RESULT(yes)
else
  with_rtk=no
  AC_MSG_RESULT(no)
  AC_MSG_WARN([***************************************************])
  AC_MSG_WARN([Couldn't find RTK so I won't build RTK-based GUIs])
  AC_MSG_WARN([Maybe you should download and install RTK?])
  AC_MSG_WARN([If you have RTK installed, try --with-rtk=path])
  AC_MSG_WARN([***************************************************])
fi
AM_CONDITIONAL(WITH_RTK, test x$with_rtk = xyes)

dnl Include RTK gui support (for debugging)
AC_ARG_ENABLE(rtkgui, 
[  --enable-rtkgui         Include RTK GUI in server (debugging)],, enable_rtkgui=no)
if test "x$enable_rtkgui" = "xyes"; then
  AC_DEFINE(INCLUDE_RTKGUI, 1, [[include the RTK GUI in server (debugging)]])
  RTKGUI_EXTRA_LIB="-L$RTK_DIR/lib -lrtk $LIBJPEG"
  RTKGUI_EXTRA_LDFLAGS="`gtk-config --libs gtk gthread`"
fi
AM_CONDITIONAL(INCLUDE_RTKGUI, test x$enable_rtkgui = xyes)
AC_SUBST(RTKGUI_EXTRA_LIB)
AC_SUBST(RTKGUI_EXTRA_LDFLAGS)

dnl where's Mobility?
AC_ARG_WITH(mobility, [  --with-mobility=dir     Location of Mobility],
MOBILITY_DIR=$with_mobility,
MOBILITY_DIR="${HOME}/../mobility/mobility-b-1.1.7-rh6.0")
AC_SUBST(MOBILITY_DIR)

dnl FreeBSD always invokes Tcl with a version, so i'll pick a reasonable one
case $host in
*-*-freebsd*) AC_CHECK_PROG([TCLPKGFILE], [tclsh8.0], [pkgIndex.tcl], [])
              TCLSH=tclsh8.0;;
*-*-*) AC_CHECK_PROG([TCLPKGFILE], [tclsh], [pkgIndex.tcl], [])
       TCLSH=tclsh;;
esac
AC_SUBST(TCLSH)


dnl client tests are compiled by default
AC_ARG_ENABLE(tests, [  --enable-tests          Don't build client tests],,
enable_tests=yes)
AM_CONDITIONAL(WITH_TESTS, test x$enable_tests = xyes)

dnl use the old compiler
AC_ARG_WITH(glibc21, [  --with-glibc21          Use the glibc 2.1 compilers],,
with_glibc21=no)
if test "x$with_glibc21" = "xyes"; then
  CXX=i386-glibc21-linux-g++
  CC=i386-glibc21-linux-gcc
fi

dnl Optionally build the python client if the header is available
PYTHON_VERSION=2.2
AC_ARG_WITH(python,
[  --without-python        Don't compile the python client libraries],
PYTHON_INTERP=$with_python,
[AC_CHECK_HEADER(python$PYTHON_VERSION/Python.h,PYTHON_INTERP=python,
PYTHON_INTERP=no)])
dnl See whether the += operator is defined in this version of Python
if test x$PYTHON_INTERP = xyes; then
  PYTHON_INTERP=python
fi
if test x$PYTHON_INTERP != xno; then
  AC_MSG_CHECKING([Python version])
  if `$PYTHON_INTERP -c "i=0;i+=1;"`; then
    AC_MSG_RESULT([>= 2, good.  Will build Python bindings.])
  else
    AC_MSG_RESULT([< 2, too old (or doesn't work).  Won't build Python bindings.])
    with_python=no
  fi
fi 2>/dev/null
AM_CONDITIONAL(WITH_PYTHON, test x$PYTHON_INTERP != xno)
AC_SUBST(PYTHON_INTERP)


dnl ************************************************************************
dnl The following macros are defined in files hiding in m4.d
dnl ************************************************************************

PLAYER_DRIVERTESTS

dnl ************************************************************************
dnl End of macros from m4.d
dnl ************************************************************************


dnl Checks for header files.
AC_CHECK_HEADERS(stdint.h strings.h sys/soundcard.h)

dnl Test for socklen_t and define it to int if it's not there.
dnl Note that we can't simply use AC_CHECK_TYPE because socklen_t 
dnl isn't in the standard headers (autoconf-2.5 has better methods for this)
AC_MSG_CHECKING(if socklen_t is defined)
AC_TRY_COMPILE(
     [#include <sys/types.h>
      #include <sys/socket.h>],
     [socklen_t len = 42; return len;],
        [AC_MSG_RESULT(yes)],
         [AC_MSG_RESULT(no)
          AC_DEFINE(socklen_t, int, must define this on BSD-based platforms)])

dnl Test for O_SYNC and define it to 0 if it's not there (it gets ORed with
dnl flags, so 0 is harmless).
dnl Note that we can't simply use AC_CHECK_TYPE because O_SYNC
dnl isn't in the standard headers (autoconf-2.5 has better methods for this)
AC_MSG_CHECKING(if O_SYNC is defined)
AC_TRY_COMPILE(
     [#include <sys/types.h>
      #include <sys/stat.h>
      #include <fcntl.h>],
     [int fd = open("foo",O_SYNC); return fd;],
        [AC_MSG_RESULT(yes)],
         [AC_MSG_RESULT(no)
          AC_DEFINE(O_SYNC, 0, must define this on some non-Linux platforms)])


dnl Checks for library functions.
AC_REPLACE_FUNCS(scandir poll dirname alphasort)
AC_CHECK_FUNCS(cfmakeraw sigblock)
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(socket, connect)
AC_CHECK_LIB(dl, dlopen)
AC_CHECK_LIB(c_r, pthread_create, 
[LIBS="-lc_r -pthread $LIBS"],[LIBS="-lpthread $LIBS"])

dnl I don't think that this is necessary
dnl AC_SUBST(LIBOBJS)

dnl Because we're using libtool to build some client libs, we need to define
dnl LTLIBOBJS to have everything that LIBOBJS has, but with extensions of .lo,
dnl instead of .o.  Here is some voodoo from the Autotools book that does it.
Xsed="sed -e s/^X//"
LTLIBOBJS=`echo X"$LIBOBJS" |\$Xsed -e "s,\. [^.]* ,.lo,g;s,\. [^.]* ,.lo,g;s,\.[^.]*$,.lo,"`
AC_SUBST(LTLIBOBJS)

dnl Create the following Makefiles (from the Makefile.ams)
AC_OUTPUT(Makefile
          replace/Makefile 
          server/Makefile 
          server/drivers/Makefile 
          server/drivers/shell/Makefile 
          server/drivers/mixed/Makefile 
          server/drivers/position/Makefile 
          server/drivers/audio/Makefile 
          server/drivers/audiodsp/Makefile
          server/drivers/audiomixer/Makefile
          server/drivers/fiducial/Makefile 
          server/drivers/ptz/Makefile 
          server/drivers/laser/Makefile 
          server/drivers/waveform/Makefile 
          server/drivers/comms/Makefile 
          server/drivers/blobfinder/Makefile 
          server/drivers/blobfinder/cmvision/Makefile
          server/drivers/wifi/Makefile 
          server/drivers/speech/Makefile 
          server/drivers/mixed/p2os/Makefile 
          server/drivers/mixed/rwi/Makefile 
          server/drivers/stage/Makefile 
          server/drivers/gazebo/Makefile 
          server/drivers/mixed/reb/Makefile 
          server/drivers/position/isense/Makefile 
          server/drivers/position/microstrain/Makefile 
          server/drivers/position/inav/Makefile 
          server/drivers/mcom/Makefile
          server/drivers/localization/Makefile
          server/drivers/localization/amcl/Makefile
          server/drivers/localization/amcl/pf/Makefile
          server/drivers/localization/amcl/map/Makefile
          server/drivers/localization/amcl/models/Makefile
          client_libs/Makefile 
          client_libs/c/Makefile
          client_libs/c++/Makefile
          client_libs/c++/test/Makefile
          client_libs/libplayerc/Makefile
          client_libs/libplayerc/test/Makefile
          client_libs/libplayerpacket/Makefile
          client_libs/pyplayerc/Makefile
          client_libs/tcl/Makefile
          examples/Makefile
          examples/c++/Makefile
          examples/libplayerc/Makefile
          utils/Makefile
          utils/playerv/Makefile
          utils/tkviewer/Makefile
          utils/playerjoy/Makefile
          config/Makefile)

dnl should use AC_MSG_NOTICE(), but that's apparently not defined in
dnl autoconf 2.13.
AC_MSG_RESULT([])
AC_MSG_RESULT([*************************************************************])
AC_MSG_RESULT([])
AC_MSG_RESULT([Player will be built on a $build system to run])
AC_MSG_RESULT([on a $host system, with the following tools:])
AC_MSG_RESULT([    C   compiler: $CC $CFLAGS])
AC_MSG_RESULT([    C++ compiler: $CXX $CXXFLAGS])
AC_MSG_RESULT([])
if test $RTK_DIR = "NONE"; then
  AC_MSG_RESULT([Player will NOT build RTK-based components.])
  AC_MSG_RESULT([])	
else
  AC_MSG_RESULT([Player will build RTK-based components using:])
  AC_MSG_RESULT([    $RTK_DIR/include/rtk.h])
  AC_MSG_RESULT([    $RTK_DIR/lib/librtk.a])
  AC_MSG_RESULT([])
fi
AC_MSG_RESULT([The following device drivers will be included:])
for player_lib in $PLAYER_DRIVERS; do
  if test -n $player_lib; then
    AC_MSG_RESULT([[    $player_lib]])
  fi
done
AC_MSG_RESULT([])
AC_MSG_RESULT([The following device drivers will NOT be included:])
for player_lib in $PLAYER_NODRIVERS; do
  if test -n $player_lib; then
    AC_MSG_RESULT([[    $player_lib]])
  fi
done
AC_MSG_RESULT([])
AC_MSG_RESULT([Player will be installed in:])
AC_MSG_RESULT([    $prefix/])
AC_MSG_RESULT([])
AC_MSG_RESULT([You can specify a different installation directory like this:])
AC_MSG_RESULT([    ./configure --prefix=<install dir>])
AC_MSG_RESULT([])
AC_MSG_RESULT([You can specify an RTK installation like this:])
AC_MSG_RESULT([    ./configure --with-rtk=<RTK prefix dir>])
AC_MSG_RESULT([])
AC_MSG_RESULT([To see the other configuration options, do:])
AC_MSG_RESULT([    ./configure --help])
AC_MSG_RESULT([])
AC_MSG_RESULT([When you're satisfied with the configuration, type 'make install'. ])
AC_MSG_RESULT([])
