dnl Process this file with autoconf to produce a configure script.

dnl Start autoconf with this file.  Not really sure why it needs a filename.
AC_INIT(src/main.cc)

dnl Need AC_PROG_MAKE_SET for recursive building
AC_PROG_MAKE_SET

dnl Define this so that we can refer to it twice below
define(PLAYER_VERSION,1.3)

dnl Generate a configuration header called <config.h> and put all the C
dnl preprocessor defines in there
AM_CONFIG_HEADER(config.h)

dnl Initialize automake with name and version of package to be built. 
dnl PACKAGE and VERSION will be so defined in <config.h>.
AM_INIT_AUTOMAKE(player,PLAYER_VERSION)

dnl Change default installation prefix from /usr/local to user's home
AC_PREFIX_DEFAULT(${HOME}/player-PLAYER_VERSION)

dnl Define the options of type --with-foo that configure should accept,
dnl along with defaults.  These options are mostly used to include/exclude 
dnl device drivers.
AC_ARG_WITH(laser, [  --without-laser          Do not include laser driver],,
with_laser=yes)
if test "x$with_laser" = "xyes"; then
  LASER_OBJ="laserdevice.o"
  AC_DEFINE(INCLUDE_LASER,1,[include the laser driver])
fi
AC_SUBST(LASER_OBJ)

AC_ARG_WITH(vision, [  --without-vision          Do not include vision driver],,
with_vision=yes)
if test "x$with_vision" = "xyes"; then
  VISION_OBJ="visiondevice.o"
  AC_DEFINE(INCLUDE_VISION,1,[include the vision driver])
fi
AC_SUBST(VISION_OBJ)

AC_ARG_WITH(ptz, [  --without-ptz          Do not include ptz driver],,
with_ptz=yes)
if test "x$with_ptz" = "xyes"; then
  PTZ_OBJ="ptzdevice.o"
  AC_DEFINE(INCLUDE_PTZ,1,[include the ptz driver])
fi
AC_SUBST(PTZ_OBJ)

AC_ARG_WITH(audio, [  --with-audio          Include audio driver],,
with_audio=no)
if test "x$with_audio" = "xyes"; then
  AUDIO_OBJ="audiodevice.o"
  AC_DEFINE(INCLUDE_AUDIO,1,[include the audio driver])
fi
AC_SUBST(AUDIO_OBJ)

AC_ARG_WITH(laserbeacon, [  --without-laserbeacon          Do not include laserbeacon driver],,
with_laserbeacon=yes)
if test "x$with_laserbeacon" = "xyes"; then
  LASERBEACON_OBJ="laserbeacondevice.o"
  AC_DEFINE(INCLUDE_LASERBEACON,1,[include the laserbeacon driver])
fi
AC_SUBST(LASERBEACON_OBJ)

AC_ARG_WITH(broadcast, [  --without-broadcast          Do not include broadcast driver],,
with_broadcast=yes)
if test "x$with_broadcast" = "xyes"; then
  BROADCAST_OBJ="broadcastdevice.o"
  AC_DEFINE(INCLUDE_BROADCAST,1,[include the broadcast driver])
fi
AC_SUBST(BROADCAST_OBJ)

AC_ARG_WITH(speech, [  --without-speech          Do not include speech driver],,
with_speech=yes)
if test "x$with_speech" = "xyes"; then
  SPEECH_OBJ="speechdevice.o"
  AC_DEFINE(INCLUDE_SPEECH,1,[include the speech driver])
fi
AC_SUBST(SPEECH_OBJ)

AC_ARG_WITH(bps, [  --without-bps          Do not include bps driver],,
with_bps=yes)
if test "x$with_bps" = "xyes"; then
  BPS_OBJ="bpsdevice.o"
  AC_DEFINE(INCLUDE_BPS,1,[include the bps driver])
fi
AC_SUBST(BPS_OBJ)

AC_ARG_WITH(p2os, [  --without-p2os          Do not include P2OS driver],,
with_p2os=yes)
if test "x$with_p2os" = "xyes"; then
  P2OS_OBJ="p2osdevice.o packet.o robot_params.o sip.o sonardevice.o positiondevice.o gripperdevice.o miscdevice.o"
  AC_DEFINE(INCLUDE_P2OS,1,[include the P2OS driver])
fi
AC_SUBST(P2OS_OBJ)

AC_ARG_WITH(rwi, [  --with-rwi          Include RWI driver],,
with_rwi=no)
if test "x$with_rwi" = "xyes"; then
  RWI_OBJ="rwi_bumperdevice.o rwidevice.o rwi_laserdevice.o rwi_positiondevice.o rwi_powerdevice.o rwi_sonardevice.o"
  AC_DEFINE(INCLUDE_RWI,1,[include the RWI driver])
  AC_DEFINE(USE_MOBILITY,1,[use the RWI Mobility interface])
fi
AC_SUBST(RWI_OBJ)

AC_ARG_WITH(stage, [  --without-stage          Do not include stage driver],,
with_stage=yes)
if test "x$with_stage" = "xyes"; then
  STAGE_OBJ="stagedevice.o stagetime.o"
  AC_DEFINE(INCLUDE_STAGE,1,[include the stage driver])
fi
AC_SUBST(STAGE_OBJ)

AC_ARG_WITH(tests, [  --with-tests          Build tests],,
with_tests=no)
AM_CONDITIONAL(WITH_TESTS, test x$with_tests = xyes)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB
AC_PROG_INSTALL

dnl Checks for header files.
#AC_HEADER_DIRENT
#AC_HEADER_STDC
#AC_CHECK_HEADERS(fcntl.h limits.h strings.h sys/file.h sys/ioctl.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
#AC_TYPE_OFF_T
#AC_TYPE_SIZE_T
#AC_HEADER_TIME

dnl Checks for library functions.
#AC_FUNC_MMAP
#AC_FUNC_SETPGRP
#AC_TYPE_SIGNAL
#AC_CHECK_FUNCS(getcwd gethostname gettimeofday socket strdup strerror)

dnl Create the following Makefiles (from the Makefile.ams)
AC_OUTPUT(Makefile 
          src/Makefile 
          client_libs/Makefile 
          client_libs/c/Makefile
          client_libs/c++/Makefile
          client_libs/c++/test/Makefile
          client_libs/libplayerc/Makefile
          client_libs/libplayerc/test/Makefile
          client_libs/tcl/Makefile
          examples/Makefile
          examples/c/Makefile
          examples/c++/Makefile
          examples/libplayerc/Makefile
          rtk2/Makefile
          utils/Makefile
          utils/playerv/Makefile
          utils/tkviewer/Makefile)
