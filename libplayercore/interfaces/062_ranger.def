description {
 * @brief A range sensor

Receive data from a range sensor, such as a laser scannar, sonar array or IR
array.

@section properties Recommended Properties

The following properties are recommended to be provided by drivers supporting
this interface, depending on device type.

@subsection laserprops Laser scanner devices

(string) type:     Type of device. For human debugging rather than client usage.

@subsection sonarprops Sonar array devices

(string) type:     Type of device. For human debugging rather than client usage.

@subsection irprops IR array devices

(string) type:     Type of device. For human debugging rather than client usage.

}

/** Data subtype: range scan */
message { DATA, RANGE, 1, player_ranger_data_range_t };
/** Data subtype: pose-stamped range scan */
message { DATA, RANGEPOSE, 2, player_ranger_data_rangepose_t };
/** Data subtype: intensity scan */
message { DATA, INTNS, 3, player_ranger_data_intns_t };
/** Data subtype: pose-stamped intensity scan */
message { DATA, INTNSPOSE, 4, player_ranger_data_intnspose_t };
/** Data subtype: sensor geometry */
message { DATA, GEOM, 5, player_ranger_geom_t };

/** Request/reply subtype: get geometry */
message { REQ, GET_GEOM, 1, player_ranger_geom_t };
/** Request/reply subtype: power config */
message { REQ, POWER, 2, player_ranger_power_config_t };
/** Request/reply subtype: intensity data config */
message { REQ, INTNS, 3, player_ranger_intns_config_t };
/** Request/reply subtype: set configuration */
message { REQ, SET_CONFIG, 4, player_ranger_config_t };
/** Request/reply subtype: get configuration */
message { REQ, GET_CONFIG, 5, player_ranger_config_t };

/** @brief Data and Request/reply: Get geometry. (@ref PLAYER_RANGER_REQ_GET_GEOM)

The ranger device position, orientation and size. */
typedef struct player_ranger_geom
{
  /** Device centre pose in robot CS [m, m, m, rad, rad, rad]. */
  player_pose3d_t pose;
  /** Size of the device [m, m, m]. */
  player_bbox3d_t size;
  /** Number of individual range sensors that make up the device. */
  uint32_t sensor_poses_count;
  /** Pose of each individual range sensor that makes up the device (in device CS). */
  player_pose3d_t *sensor_poses;
  /** Number of individual range sensors that make up the device. */
  uint32_t sensor_sizes_count;
  /** Size of each individual range sensor that makes up the device. */
  player_bbox3d_t *sensor_sizes;
} player_ranger_geom_t;

/** @brief Data: range scan (@ref PLAYER_RANGER_DATA_RANGE)

The basic ranger scan data packet, containing a set of range readings. */
typedef struct player_ranger_data_range
{
  /** Number of range readings. */
  uint32_t ranges_count;
  /** Range readings [m]. */
  double *ranges;
} player_ranger_data_range_t;

/** @brief Data: post-stamped range scan (@ref PLAYER_RANGER_DATA_RANGEPOSE)

A range scan with the (possibly estimated) pose of the device when the scan was
acquired. */
typedef struct player_ranger_data_rangepose
{
  /** The scan data. */
  player_ranger_data_range_t data;
  /** The geometry of the device at the time the scan was acquired. */
  player_ranger_geom_t geom;
} player_ranger_data_rangepose_t;

/** @brief Data: intensity scan (@ref PLAYER_RANGER_DATA_INTNS)

A set of intensity readings. */
typedef struct player_ranger_data_intns
{
  /** Number of intensity readings. */
  uint32_t intensities_count;
  /** Intensity readings. */
  double *intensities;
} player_ranger_data_intns_t;

/** @brief Data: post-stamped intensity scan (@ref PLAYER_RANGER_DATA_INTNSPOSE)

An intensity scan with the (possibly estimated) pose of the device when the scan
was acquired. */
typedef struct player_ranger_data_intnspose
{
  /** The scan data. */
  player_ranger_data_intns_t data;
  /** The geometry of the device at the time the scan was acquired. */
  player_ranger_geom_t geom;
} player_ranger_data_intnspose_t;

/** @brief Request/reply: Turn power on/off (@ref PLAYER_RANGER_REQ_POWER)

If the device supports it, use this message to turn the power on or off. */
typedef struct player_ranger_power_config
{
  /** TRUE to turn device on, FALSE to turn device off. */
  uint8_t state;
} player_ranger_power_config_t;

/** @brief Request/reply: Turn intensity data on/off for devices that provide it
(@ref PLAYER_RANGER_REQ_INTNS)

If the device is capable of providing intensity information (such as laser
reflection intensity or IR voltage), this will enable the transmission of the
data in the @ref PLAYER_RANGER_DATA_INTNS data message. */
typedef struct player_ranger_intns_config
{
  /** TRUE to turn data on, FALSE to turn data off. */
  uint8_t state;
} player_ranger_intns_config_t;

/** @brief Device configuration request (@ref PLAYER_RANGER_REQ_GET_CONFIG)

Request and change the device's configuration. */
typedef struct player_ranger_config
{
  /** Start angle of scans [rad]. May be unfilled. */
  double min_angle;
  /** End angle of scans [rad]. May be unfilled. */
  double max_angle;
  /** Scan resolution [rad]. May be unfilled. */
  double resolution;
  /** Maximum range [m]. May be unfilled. */
  double max_range;
  /** Range resolution [m]. May be unfilled. */
  double range_res;
  /** Scanning frequency [Hz]. May be unfilled. */
  double frequency;
} player_ranger_config_t;

