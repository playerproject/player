dnl Process this file with autoconf to produce a configure script.

dnl Initialize autoconf with name and version of package to be built.
dnl PACKAGE and VERSION will be so defined in <config.h>.
AC_INIT(player,2.0-pre6)

AC_CONFIG_SRCDIR(server/server.cc)

AC_PREREQ(2.53)

dnl figure out build system (uname-style info)
AC_CANONICAL_SYSTEM

dnl Some parts of the build need to know that we're running on Darwin.
darwin=no
case $host in
  *-darwin*)
    darwin=yes ;;
esac
AM_CONDITIONAL(DARWIN, test "x$darwin" = "xyes")

dnl Initialize automake, requiring version 1.7 or better
AM_INIT_AUTOMAKE(1.7)

dnl Need AC_PROG_MAKE_SET for recursive building
AC_PROG_MAKE_SET

dnl Generate a configuration header called <config.h> and put all the C
dnl preprocessor defines in there.
dnl
dnl Also create playerconfig.h, replacing a couple of C defines with the right
dnl values.  This will be included by player.h
dnl
AC_CONFIG_HEADERS(config.h libplayercore/playerconfig.h)

dnl Find basic tools
AC_PROG_CC
AC_PROG_CXX
if test ! $GCC = yes -o ! $GXX = yes; then
  AC_MSG_ERROR([Player *requires* gcc and g++ to build.])
fi
AC_PROG_CPP
AC_PROG_INSTALL
AC_C_BIGENDIAN

AC_PROG_LIBTOOL

dnl by default, don't build any shared libs
dnl AC_DISABLE_SHARED
dnl AM_PROG_LIBTOOL

dnl if the user doesn't supply a prefix, we're headed for /usr/local
if test "x$prefix" != "xNONE"; then
  PREFIX=$prefix
else
  PREFIX=/usr/local
fi
AC_SUBST(PREFIX)

dnl Do we have pkg-config?
AC_CHECK_PROG(have_pkg_config,pkg-config,yes,no)
if test "x$have_pkg_config" = "xno"; then
  AC_MSG_WARN([You should really install pkg-config])
  AC_MSG_WARN([Some components of Player will not be built])
else
  dnl Add prefix to the pkg-config path in case RTK or Gazebo was
  dnl installed there and the user didn't add it manually .
  dnl
  dnl Also, add /usr/local/lib/pkgconfig, because on
  dnl some platforms, pkg-config won't look there by default.
  export PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig:/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
fi

dnl Do we have SWIG (used for language bindings)?
AC_CHECK_PROG(have_swig,swig,yes,no)

dnl Do we have Python?
AC_CHECK_PROG(have_python,python,yes,no)
AM_CONDITIONAL(HAVE_PYTHON, test "x$have_python" = "xyes")

dnl Where are the JNI headers?
AC_ARG_WITH(jnidir, [  --with-jnidir=<directory containing jni.h],,
with_jnidir=/usr/lib/j2sdk1.5-sun/include)
AC_ARG_WITH(jni_mddir, [  --with-jni_mddir=<directory containing jni_md.h],,
with_jni_mddir=/usr/lib/j2sdk1.5-sun/include/linux)

dnl Look for the JNI headers.  I'm using AC_CHECK_FILE, rather than
dnl AC_CHECK_HEADER, because I can't figure out how to get the latter to
dnl successfully compile a test program that #include's <jni.h>
AC_CHECK_FILE($with_jnidir/jni.h, have_jni_h=yes, have_jni_h=no)
AC_CHECK_FILE($with_jni_mddir/jni_md.h, have_jni_md_h=yes, have_jni_md_h=no)

dnl Do we have a Java compiler?
AC_CHECK_PROG(have_java,javac,yes,no)

dnl Let the user disable building java wrappers
AC_ARG_ENABLE(jplayer, [  --disable-jplayer         Don't build Jplayer (the Java wrappers)],, enable_jplayer=yes)

dnl If we have python, swig, javac, jni.h, and jni_md.h, then all 
dnl systems are go for building Jplayer
if test "x$enable_jplayer" = "xyes" -a "x$have_python" = "xyes" -a "x$have_swig" = "xyes" -a "x$have_java" = "xyes" -a "x$have_jni_h" = "xyes" -a "x$have_jni_md_h" = "xyes"; then
  enable_java=yes
else
  enable_java=no
fi
AM_CONDITIONAL(ENABLE_JAVA, test "x$enable_java" = "xyes")
JNI_CFLAGS="-I$with_jnidir -I$with_jni_mddir"
AC_SUBST(JNI_CFLAGS)

dnl client tests are compiled by default
AC_ARG_ENABLE(tests,   [  --disable-tests          Don't build client tests],,
enable_tests=yes)
AM_CONDITIONAL(WITH_TESTS, test "x$enable_tests" = "xyes")
AC_ARG_ENABLE(profile, [  --enable-profile        Compile with profiling information (with the -pg and -fprofile-arcs compile flags)],
    if test "x$enableval" = "xyes"; then
        CXXFLAGS="$CXXFLAGS -pg -fprofile-arcs"
        CFLAGS="$CFLAGS -pg -fprofile-arcs"
    fi,
)

AC_ARG_ENABLE(optimize, [  --disable-optimize      Compile without optimization (O2) ],
    if test "x$enableval" = "xyes"; then
        CXXFLAGS="$CXXFLAGS -O2"
        CFLAGS="$CFLAGS -O2"
    elif test "x$enableval" = "xno"; then
        CXXFLAGS=`echo $CXXFLAGS | sed -e s/-O.//g`
        CFLAGS=`echo $CFLAGS | sed -e s/-O.//g`
    else
        CXXFLAGS="$CXXFLAGS -$enableval"
        CFLAGS="$CFLAGS -$enableval"
    fi,
)

AC_ARG_ENABLE(debug,    [  --disable-debug         Compile without debugging information (-g)],
    if test "x$enableval" = "xyes"; then
        CXXFLAGS="$CXXFLAGS -g"
        CFLAGS="$CFLAGS -g"
    elif test "x$enableval" = "xno"; then
        CXXFLAGS=`echo $CXXFLAGS | sed -e s/-g//g`
        CFLAGS=`echo $CFLAGS | sed -e s/-g//g`
    fi,
)

dnl use the old compiler
AC_ARG_WITH(glibc21, [  --with-glibc21          Use the glibc 2.1 compilers],,
with_glibc21=no)
if test "x$with_glibc21" = "xyes"; then
  CXX=i386-glibc21-linux-g++
  CC=i386-glibc21-linux-gcc
fi

AC_ARG_ENABLE(alldrivers,
              [  --disable-alldrivers         Don't build any drivers],,
              enable_alldrivers=yes)

dnl ************************************************************************
dnl Start of macros from acinclude.m4
dnl ************************************************************************

dnl Do the standard driver tests (including gazebo)
PLAYER_DRIVERTESTS

dnl Do some additional gazebo tests (may omit some gazebo drivers)
GAZEBO_FIND
if test "x$enable_gazebo" = "xyes"; then
   GAZEBO_DRIVERTESTS
fi

dnl ************************************************************************
dnl End of macros from acinclude.m4
dnl ************************************************************************

dnl Set up GTK/GNOME for the various GUIs
dnl we do it before configuring drivers in case they have GUI bits
dnl The logic is: only use pkg-config
if test "x$have_pkg_config" = "xno"; then
  AC_MSG_WARN([Can't locate GTK/GNOME without pkg-config.])
  AC_MSG_WARN([No GTK/GNOME-based GUIs will be built.])
  with_gtk=no
  with_gnomecanvas=no
else
  dnl pkg-config is available, so we use it.
  dnl check for libgnomecanvas and gtk, which some utils
  dnl (e.g., playernav, playervcr) need
  PKG_CHECK_MODULES(GNOMECANVAS, libgnomecanvas-2.0,
                    with_gnomecanvas=yes,
                    with_gnomecanvas=no)
  PKG_CHECK_MODULES(GTK, gtk+-2.0,
                    with_gtk=yes,
                    with_gtk=no)
fi
AM_CONDITIONAL(WITH_GNOMECANVAS, test "x$with_gnomecanvas" = "xyes")
AM_CONDITIONAL(WITH_GTK, test "x$with_gtk" = "xyes")

AC_CXX_NAMESPACES
AX_BOOST_THREAD
AX_BOOST_SIGNALS
AM_CONDITIONAL(INCLUDE_BOOST_SIGNALS, test "$ax_cv_boost_signal" = yes)

dnl Include RTK gui support (for debugging)
AC_ARG_ENABLE(rtkgui,
[  --enable-rtkgui         Include RTK GUI in server (debugging)],, enable_rtkgui=no)
if test "x$with_gtk" = "xyes"; then
  if test "x$enable_rtkgui" = "xyes"; then
    AC_DEFINE(INCLUDE_RTKGUI, 1, [[include the RTK GUI in server (debugging)]])
  fi
else
  enable_rtkgui=no
fi
AM_CONDITIONAL(INCLUDE_RTKGUI, test "x$enable_rtkgui" = "xyes")

dnl Checks for header files.
AC_CHECK_HEADERS(stdint.h strings.h sys/soundcard.h sys/filio.h linux/joystick.h jpeglib.h)

dnl Test for socklen_t and define it to int if it's not there.
dnl Note that we can't simply use AC_CHECK_TYPE because socklen_t
dnl isn't in the standard headers (autoconf-2.5 has better methods for this)
AC_MSG_CHECKING(if socklen_t is defined)
AC_TRY_COMPILE(
     [#include <sys/types.h>
      #include <sys/socket.h>],
     [socklen_t len = 42; return len;],
        [AC_MSG_RESULT(yes)],
         [AC_MSG_RESULT(no)
          AC_DEFINE(socklen_t, int, must define this on BSD-based platforms)])

dnl Test for O_SYNC and define it to 0 if it's not there (it gets ORed with
dnl flags, so 0 is harmless).
dnl Note that we can't simply use AC_CHECK_TYPE because O_SYNC
dnl isn't in the standard headers (autoconf-2.5 has better methods for this)
AC_MSG_CHECKING(if O_SYNC is defined)
AC_TRY_COMPILE(
     [#include <sys/types.h>
      #include <sys/stat.h>
      #include <fcntl.h>],
     [int fd = open("foo",O_SYNC); return fd;],
        [AC_MSG_RESULT(yes)],
         [AC_MSG_RESULT(no)
          AC_DEFINE(O_SYNC, 0, must define this on some non-Linux platforms)])

dnl Checks for library functions.
AC_REPLACE_FUNCS(poll dirname cfmakeraw)
AC_CHECK_FUNCS(sigblock getaddrinfo)
AC_CHECK_LIB(rt, nanosleep)
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(socket, connect)
AC_CHECK_LIB(ltdl, lt_dlopenext,
             have_libltdl=yes
             AC_DEFINE(HAVE_LIBLTDL, 1, [Define to 1 if you have the ltdl library (-lltdl). ])
             LIBS="$LIBS -lltdl",
             have_libltdl=no)
AC_CHECK_LIB(c_r, pthread_create,
             [LIBS="-lc_r -pthread $LIBS"],[LIBS="-lpthread $LIBS"])
AC_CHECK_LIB(jpeg,jpeg_read_header,
             have_libjpeg=yes
             AC_DEFINE(HAVE_LIBJPEG, 1, [Define to 1 if you have the jpeg library (-ljpeg). ])
             LIBS="$LIBS -ljpeg",
             have_libjpeg=no)
AM_CONDITIONAL(INCLUDE_JPEG, test "x$have_libjpeg" = "xyes")

dnl Check for OpenCV
if test "x$have_pkg_config" = "xyes"; then
   PKG_CHECK_MODULES(OPENCV, opencv, with_opencv=yes, with_gtk=no)
   if test "x$with_opencv" = "xyes"; then
      AC_DEFINE(HAVE_OPENCV, 1, [OpenCV library is present])
   fi
fi
AM_CONDITIONAL(WITH_OPENCV, test "x$with_opencv" = "xyes")

if test "x$have_pkg_config" = "xyes"; then
  PKG_CHECK_MODULES(IMAGEMAGICK, ImageMagick++,
                    with_imagemagick=yes,
                    with_imagemagick=no)
fi
AM_CONDITIONAL(WITH_IMAGEMAGICK, test "x$with_imagemagick" = "xyes")

dnl Optionally build python bindings to libplayerc (libplayerc-py)
AC_ARG_ENABLE(libplayerc-py,
     [  --disable-libplayerc-py    Don't compile python bindings for libplayerc],,
     enable_libplayerc_py=yes)
if test "x$enable_libplayerc_py" = "xno"; then
  enable_libplayerc_py=no
  reason_libplayerc_py="disabled by user"
elif test "x$have_swig" = "xno"; then
  enable_libplayerc_py=no
  reason_libplayerc_py="could not find swig"
elif test "x$have_python" = "xno"; then
  enable_libplayerc_py=no
  reason_libplayerc_py="could not find python"
elif test "x$have_libjpeg" = "xno"; then
  enable_libplayerc_py=no
  reason_libplayerc_py="could not find libjpeg"
fi
AM_CONDITIONAL(INCLUDE_LIBPLAYERC_PY, test "x$enable_libplayerc_py" = "xyes")

dnl Create the following Makefiles (from the Makefile.ams)
AC_OUTPUT(Makefile
          rtk2/Makefile
          replace/Makefile
          doc/Makefile
          libplayerjpeg/Makefile
          libplayercore/Makefile
          libplayercore/bindings/Makefile
          libplayercore/bindings/java/Makefile
          libplayercore/playercore.pc
          libplayercore/playererror.pc
          libplayerxdr/Makefile
          libplayerxdr/playerxdr.pc
          libplayertcp/Makefile
          libplayertcp/bindings/Makefile
          libplayertcp/bindings/java/Makefile
          libplayertcp/playertcp.pc
          server/Makefile
          server/libplayerdrivers/Makefile
          server/libplayerdrivers/playerdrivers.pc
          server/drivers/Makefile
          server/drivers/gps/Makefile
          server/drivers/shell/Makefile
          server/drivers/mixed/Makefile
          server/drivers/position/Makefile
          server/drivers/audio/Makefile
          server/drivers/audiodsp/Makefile
          server/drivers/audiomixer/Makefile
          server/drivers/camera/Makefile
          server/drivers/camera/v4l/Makefile
          server/drivers/camera/1394/Makefile
          server/drivers/camera/compress/Makefile
          server/drivers/camera/imageseq/Makefile
          server/drivers/camera/sphere/Makefile
          server/drivers/fiducial/Makefile
          server/drivers/ptz/Makefile
          server/drivers/laser/Makefile
          server/drivers/waveform/Makefile
          server/drivers/blobfinder/Makefile
          server/drivers/blobfinder/cmvision/Makefile
          server/drivers/blobfinder/upcbarcode/Makefile
    server/drivers/blobfinder/simpleshape/Makefile
    server/drivers/blobfinder/acts/Makefile
    server/drivers/blobfinder/shapetracker/Makefile
          server/drivers/wifi/Makefile
          server/drivers/speech/Makefile
          server/drivers/speech/recognition/Makefile
          server/drivers/mixed/cmucam2/Makefile
          server/drivers/mixed/p2os/Makefile
          server/drivers/mixed/rflex/Makefile
          server/drivers/mixed/reb/Makefile
          server/drivers/mixed/khepera/Makefile
          server/drivers/mixed/rmp/Makefile
    server/drivers/mixed/garcia/Makefile
          server/drivers/mixed/nomad/Makefile
          server/drivers/mixed/botrics/Makefile
          server/drivers/mixed/clodbuster/Makefile
          server/drivers/mixed/evolution/Makefile
          server/drivers/mixed/evolution/er1/Makefile
          server/drivers/gazebo/Makefile
          server/drivers/planner/Makefile
          server/drivers/planner/wavefront/Makefile
          server/drivers/position/isense/Makefile
          server/drivers/position/microstrain/Makefile
          server/drivers/position/vfh/Makefile
          server/drivers/position/ascension/Makefile
          server/drivers/position/bumpersafe/Makefile
          server/drivers/mcom/Makefile
          server/drivers/localization/Makefile
          server/drivers/localization/amcl/Makefile
          server/drivers/service_adv/Makefile
          server/drivers/map/Makefile
          server/drivers/joystick/Makefile
          client_libs/Makefile
dnl          client_libs/c/Makefile
dnl          client_libs/c/playercclient.pc
          client_libs/libplayerc++/Makefile
          client_libs/libplayerc++/playerc++.pc
          client_libs/libplayerc++/test/Makefile
          client_libs/libplayerc/Makefile
dnl          client_libs/libplayerc/doc/Makefile
          client_libs/libplayerc/playerc.pc
          client_libs/libplayerc/test/Makefile
dnl          client_libs/libplayerc/bindings/Makefile
dnl          client_libs/libplayerc/bindings/python/Makefile
dnl          client_libs/libplayerpacket/Makefile
          examples/Makefile
          examples/plugins/Makefile
          examples/plugins/exampledriver/Makefile
          examples/plugins/multidriver/Makefile
          examples/libplayerc++/Makefile
dnl          examples/libplayerc/Makefile
          utils/Makefile
          utils/playercam/Makefile
          utils/playerv/Makefile
          utils/playerjoy/Makefile
          utils/playernav/Makefile
          utils/playerprint/Makefile
          utils/playervcr/Makefile
dnl          utils/dgps_server/Makefile
dnl          utils/barcodes/Makefile
          config/Makefile)

dnl should use AC_MSG_NOTICE(), but that's apparently not defined in
dnl autoconf 2.13.
AC_MSG_RESULT([])
AC_MSG_RESULT([*************************************************************])
AC_MSG_RESULT([])
AC_MSG_RESULT([Player will be built on a $build system to run])
AC_MSG_RESULT([on a $host system, with the following tools:])
AC_MSG_RESULT([    C   compiler: $CC $CFLAGS])
AC_MSG_RESULT([    C++ compiler: $CXX $CXXFLAGS])

AC_MSG_RESULT([])
if test "x$have_libltdl" = "xyes"; then
  AC_MSG_RESULT([Support for plugin drivers will be included.])
  AC_MSG_RESULT([ ])
else
  AC_MSG_RESULT([Support for plugin drivers will NOT be included.])
  AC_MSG_RESULT([You need plugin support to use Stage.])
  AC_MSG_RESULT([To add plugin support, install libltdl, which is ])
  AC_MSG_RESULT([part of GNU libtool, then configure Player again.])
  AC_MSG_RESULT([ ])
fi

if test "x$PYTHON_INTERP" != "xno"; then
   AC_MSG_RESULT([To use the Python bindings, modify your PYTHONPATH variable to include])
   AC_MSG_RESULT([    $PREFIX/lib/python/\$PYTHON_VERSION/site-packages])
   AC_MSG_RESULT([For example:])
   AC_MSG_RESULT([    export PYTHONPATH=\$PYTHONPATH:$PREFIX/lib/python/\$PYTHON_VERSION/site-packages])
fi
AC_MSG_RESULT([])

dnl Expand this to include all client libs/bindings
dnl libplayerc python bindings
if test "x$enable_libplayerc_py" = "xyes"; then
  AC_MSG_RESULT([libplayerc Python bindings will be built])
else
  AC_MSG_RESULT([libplayerc Python bindings will not be built -- $reason_libplayerc_py])
fi
AC_MSG_RESULT([])

if test "$ax_cv_boost_signal" = yes; then
  AC_MSG_RESULT([Player will build C++ client libraries])
else
  AC_MSG_RESULT([Player will NOT build C++ client libraries])
  AC_MSG_RESULT([  Install BOOST (www.boost.org) libraries to enable C++])
fi
AC_MSG_RESULT([])

if test "x$enable_gazebo" = "xyes"; then
  AC_MSG_RESULT([Player will build Gazebo-based components using:])
  AC_MSG_RESULT([    CPPFLAGS: $GAZEBO_EXTRA_CPPFLAGS])
  AC_MSG_RESULT([    LDFLAGS: $GAZEBO_EXTRA_LDFLAGS])
  AC_MSG_RESULT([])
else
  AC_MSG_RESULT([Gazebo support will not be included -- $gazebo_disable_reason])
  AC_MSG_RESULT([])
fi

AC_MSG_RESULT([The following device drivers will be included:])
for player_lib in $PLAYER_DRIVERS; do
  if test -n $player_lib; then
    AC_MSG_RESULT([[+ $player_lib]])
  fi
done
AC_MSG_RESULT([])
AC_MSG_RESULT([The following device drivers will NOT be included:])
dnl Change the internal field seperator (IFS) to be a colon, so that the
dnl driver list will be parsed correctly.
old_IFS=$IFS
IFS=:
for player_lib in $PLAYER_NODRIVERS; do
  if test ! $player_lib = "" ; then
    AC_MSG_RESULT([[- $player_lib]])
  fi
done
dnl Change the IFS back to what it was.
IFS=$old_IFS

AC_MSG_RESULT([])
AC_MSG_RESULT([Player will be installed in:])
AC_MSG_RESULT([    $PREFIX/])
AC_MSG_RESULT([])
AC_MSG_RESULT([To see the configuration options, do:])
AC_MSG_RESULT([    ./configure --help])
AC_MSG_RESULT([])
AC_MSG_RESULT([When you're satisfied with the configuration, type 'make install'. ])
AC_MSG_RESULT([])
