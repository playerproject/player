/*
 *  Player - One Hell of a Robot Server
 *  Copyright (C) 2000
 *     Brian Gerkey, Kasper Stoy, Richard Vaughan, & Andrew Howard
 *                   
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

/* 
 * robot_params.h 
 *
 * ActivMedia robot parameters, automatically generated by saphconv.tcl from 
 * Saphira parameter files:
 *    amigo.p
 *    p2at.p
 *    p2ce.p
 *    p2de.p
 *    p2dx.p
 *    p2it.p
 *    p2pb.p
 *    p2pp.p
 *    pion1m.p
 *    pion1x.p
 *    pionat.p
 *    psos1m.p
 *    psos1x.p
*/

#ifndef _ROBOT_PARAMS_H
#define _ROBOT_PARAMS_H


void initialize_robot_params(void);

#define PLAYER_NUM_ROBOT_TYPES 13


typedef struct
{
  char* Class;
  char* Subclass;
  double RobotRadius; // radius in mm
  double RobotDiagonal; // half-height to diagonal of octagon
  int Holonomic; // turns in own radius
  double MaxRVelocity; // degrees per second
  double MaxVelocity; // mm per second
  int HasMoveCommand; // has built in move command
} RobotParams_General_t;

typedef struct
{
  double AngleConvFactor; // radians per angular unit (2PI/4096)
  double DistConvFactor; // mm returned by P2
  double VelConvFactor; // mm/sec returned by P2
  double RangeConvFactor; // sonar range returned in mm
  double DiffConvFactor; // ratio of angular velocity to wheel velocity difference
  double Vel2Divisor; // divisor for sending VEL2 commands to the robot
} RobotParams_ConvFactors_t;

typedef struct
{
  int TableSensingIR; // if the robot has upwards facing table sensing IR
  int FrontBumpers; // if the robot has a front bump ring
  int RearBumpers; // if the robot has a rear bump ring
} RobotParams_Accessories_t;

typedef struct
{
  int SonarNum; // Number of sonar on the robot
  double pose[16][3]; // Pose of each sonar relative to robot (m, m, degrees).
} RobotParams_Sonar_t;

typedef struct
{
  RobotParams_General_t General;
  RobotParams_ConvFactors_t ConvFactors;
  RobotParams_Accessories_t Accessories;
  RobotParams_Sonar_t Sonar;
} RobotParams_t;


extern RobotParams_t PlayerRobotParams[];


#endif
