/** @ingroup tutorials
@defgroup tutorial_config Writing configuration files
@brief Config files

@par Overview

Player needs to know which drivers to instantiate and to which device
addresses each should be bound.  This information is usually specified in a
Player configuration file (it can also be done directly from code by
calling into @ref libplayercore).

A Player configuration file is a text file that, by convention, has the
extension <b>.cfg</b>.  The file is composed of one or more <b>driver</b>
section, each of which instantiates and configures a single driver.
Consider an example:

@code
driver
(
  name "sicklms200"
  provides ["laser:0"]
)
@endcode

This block instantiates the @ref driver_sicklms200 driver.  The
<b>provides</b> keyword is used to specify the device address to which the
driver will be bound.  Using this configuration, an instance of the @ref
driver_sicklms200 driver will be available as @ref interface_laser :0.

@par Basic syntax

A driver section is declared by the keyword <b>driver( )</b>.  Option-value
pairs for the driver go inside the parentheses.  An option and its value
are whitespace-separated, as are consecutive option-value pairs.  All
standard whitespace characters are treated equally, so that the following
section is equivalent to the one given above:

@code
driver (name "sicklms200" provides ["laser:0"])
@endcode

Comments are signified by the <b>#</b>character.  Any characters following
the <b>#</b> up to the next newline are ignored.  E.g.:

@code
# A laser
driver
(
  name "sicklms200" # The driver's name
  provides ["laser:0"] # The device address
)
@endcode

@par Types

The following types are supported for option values:
 - integer : typed literally
   - Example:
     @code
       foo  42
     @endcode
 - floating point : typed literally
   - Example:
     @code
       bar  3.14159
     @endcode
 - string : enclosed in double quotes
   - Example:
     @code
       bat  "hello world"
     @endcode
 - length : typed literally (see discussion of Units below)
   - Example:
     @code
       baz  8.0
     @endcode
 - angle : typed literally (see discussion of Units below)
   - Example:
     @code
       bang  180.0
     @endcode
 - tuple : enclosed in brackets (types can be mixed)
     @code
       widget [42 3.14159 "hello world" 8.0 180.0]  
     @endcode

@par Units

In order to aid the use of standard units, explicit types are provided for
lengths and angles.  When a driver reads a length from the configuration
file, the value is always returned in meters.  When an angle is read, the
value is always returned in radians.

For the convenience, the user may specify lengths and angles in the
configuration using different units.  By default, lengths are assumed to be
given in meters, with angles in degrees.  The units can be changed using
the global (i.e., not inside a <b>driver</b> section) options
<b>unit_length</b> and <b>unit_angle</b>; e.g.:

@code
unit_length "cm" # Change length units to centimeters
unit_angle  "radians" # Change angle units to radians
@encode

Valid values for <b>unit_length</b> are:
  - "m" : meters (default)
  - "cm" : centimeters
  - "mm" : millimeters
Valid values for <b>unit_angle</b> are:
  - "degrees" : degrees (default)
  - "radians" : radians

These options are order-sensitive and sticky.  A length (angle) is parsed
in the context of the most recently-parsed <b>unit_length</b>
(<b>unit_angle</b>) option.  So you can change units multiple times as is
convenient throughout the file.

Note that unit context extends into included files, so special care is
needed when mixing units with file inclusion.

@par Including other files



*/
