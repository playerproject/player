/*
 *  Player - One Hell of a Robot Server
 *  Copyright (C) 2000
 *     Brian Gerkey, Kasper Stoy, Richard Vaughan, & Andrew Howard
 *                   
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

/* 
 * robot_params.h 
 *
 * ActivMedia robot parameters, automatically generated by saphconv.tcl from 
 * Saphira parameter files:
 *    Aria/params/amigo-sh.p
 *    Aria/params/amigo.p
 *    Aria/params/p2at.p
 *    Aria/params/p2at8+.p
 *    Aria/params/p2at8.p
 *    Aria/params/p2ce.p
 *    Aria/params/p2d8+.p
 *    Aria/params/p2d8.p
 *    Aria/params/p2de.p
 *    Aria/params/p2df.p
 *    Aria/params/p2dx.p
 *    Aria/params/p2it.p
 *    Aria/params/p2pb.p
 *    Aria/params/p2pp.p
 *    Aria/params/p3at-sh.p
 *    Aria/params/p3at.p
 *    Aria/params/p3atiw-sh.p
 *    Aria/params/p3dx-sh.p
 *    Aria/params/p3dx.p
 *    Aria/params/patrolbot-sh.p
 *    Aria/params/peoplebot-sh.p
 *    Aria/params/perfpb+.p
 *    Aria/params/perfpb.p
 *    Aria/params/pion1m.p
 *    Aria/params/pion1x.p
 *    Aria/params/pionat.p
 *    Aria/params/powerbot-sh.p
 *    Aria/params/powerbot.p
 *    Aria/params/psos1m.p
 *    Aria/params/psos1x.p
 *    Aria/params/psos43m.p
 *    Aria/params/researchPB.p
 *    Aria/params/seekur.p
 *    Aria/params/seekurjr.p
 *    Aria/params/wheelchair-sh.p
*/

#ifndef _ROBOT_PARAMS_H
#define _ROBOT_PARAMS_H


void initialize_robot_params(void);

#define PLAYER_NUM_ROBOT_TYPES 35


typedef struct
{
  double x;
  double y;
  double th;
} sonar_pose_t;


typedef struct
{
  double x;
  double y;
  double th;
  double length;
  double radius;
} bumper_def_t;


typedef struct
{
 //AngleConvFactor is (0.001534)
  double AngleConvFactor; // 
 //Class is (Pioneer)
  char* Class; // 
 //CompassPort is (;)
  char* CompassPort; // 
 //CompassType is (robot)
  char* CompassType; // 
 //DiffConvFactor is (0.00373)
  double DiffConvFactor; // 
 //DistConvFactor is (1)
  int DistConvFactor; // 
 //FrontBumpers is (true)
  int FrontBumpers; // 
 //GPSBaud is (9600)
  int GPSBaud; // 
 //GPSPX is (0)
  int GPSPX; // 
 //GPSPY is (0)
  int GPSPY; // 
 //GPSPort is (COM3)
  char* GPSPort; // 
 //GPSType is (standard)
  char* GPSType; // 
 //GyroScaler is (1.626)
  double GyroScaler; // 
 //HasLatVel is (false)
  int HasLatVel; // 
 //HasMoveCommand is (true)
  int HasMoveCommand; // 
 //Holonomic is (true)
  int Holonomic; // 
 //IRNum is (0)
  int IRNum; // 
 //IRUnit is (3)
  int IRUnit; // 
 //LaserAutoBaudChoice is (;)
  char* LaserAutoBaudChoice; // 
 //LaserAutoConnect is (false)
  int LaserAutoConnect; // 
 //LaserCumulativeBufferSize is (0)
  int LaserCumulativeBufferSize; // 
 //LaserDegreesChoice is (;)
  char* LaserDegreesChoice; // 
 //LaserEndDegrees is (;)
  char* LaserEndDegrees; // 
 //LaserFlipped is (false)
  int LaserFlipped; // 
 //LaserIgnore is (;)
  char* LaserIgnore; // 
 //LaserIncrement is (;)
  char* LaserIncrement; // 
 //LaserIncrementChoice is (;)
  char* LaserIncrementChoice; // 
 //LaserMaxRange is (0)
  int LaserMaxRange; // 
 //LaserPort is (;)
  char* LaserPort; // 
 //LaserPortType is (;)
  char* LaserPortType; // 
 //LaserPowerControlled is (true)
  int LaserPowerControlled; // 
 //LaserReflectorBitsChoice is (;)
  char* LaserReflectorBitsChoice; // 
 //LaserStartDegrees is (;)
  char* LaserStartDegrees; // 
 //LaserStartingBaudChoice is (;)
  char* LaserStartingBaudChoice; // 
 //LaserTh is (0)
  int LaserTh; // 
 //LaserType is (;)
  char* LaserType; // 
 //LaserUnitsChoice is (;)
  char* LaserUnitsChoice; // 
 //LaserX is (0)
  int LaserX; // 
 //LaserY is (0)
  int LaserY; // 
 //LaserZ is (0)
  int LaserZ; // 
 //LatAccel is (0)
  int LatAccel; // 
 //LatDecel is (0)
  int LatDecel; // 
 //LatVelMax is (0)
  int LatVelMax; // 
 //MaxLatVelocity is (0)
  int MaxLatVelocity; // 
 //MaxRVelocity is (360)
  int MaxRVelocity; // 
 //MaxVelocity is (2000)
  int MaxVelocity; // 
 //NewTableSensingIR is (false)
  int NewTableSensingIR; // 
 //NumFrontBumpers is (4)
  int NumFrontBumpers; // 
 //NumRearBumpers is (3)
  int NumRearBumpers; // 
 //RangeConvFactor is (1)
  int RangeConvFactor; // 
 //RearBumpers is (true)
  int RearBumpers; // 
 //RequestEncoderPackets is (false)
  int RequestEncoderPackets; // 
 //RequestIOPackets is (false)
  int RequestIOPackets; // 
 //RobotDiagonal is (300)
  int RobotDiagonal; // 
 //RobotLength is (1340)
  int RobotLength; // 
 //RobotLengthFront is (0)
  int RobotLengthFront; // 
 //RobotLengthRear is (0)
  int RobotLengthRear; // 
 //RobotRadius is (550)
  int RobotRadius; // 
 //RobotWidth is (680)
  int RobotWidth; // 
 //RotAccel is (0)
  int RotAccel; // 
 //RotDecel is (0)
  int RotDecel; // 
 //RotVelMax is (0)
  int RotVelMax; // 
 //SettableAccsDecs is (true)
  int SettableAccsDecs; // 
 //SettableVelMaxes is (false)
  int SettableVelMaxes; // 
 //SonarNum is (0)
  int SonarNum; // 
 //Subclass is (wheelchair-sh)
  char* Subclass; // 
 //SwitchToBaudRate is (38400)
  int SwitchToBaudRate; // 
 //TableSensingIR is (false)
  int TableSensingIR; // 
 //TransAccel is (0)
  int TransAccel; // 
 //TransDecel is (0)
  int TransDecel; // 
 //TransVelMax is (0)
  int TransVelMax; // 
 //Vel2Divisor is (20)
  int Vel2Divisor; // 
 //VelConvFactor is (1)
  int VelConvFactor; // 
  sonar_pose_t sonar_pose[32];
  bumper_def_t bumper_geom[12];
} RobotParams_t;


extern RobotParams_t PlayerRobotParams[];


#endif
