/*
 *  Player - One Hell of a Robot Server
 *  Copyright (C) 2000
 *     Brian Gerkey, Kasper Stoy, Richard Vaughan, & Andrew Howard
 *                   
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

/* 
 * reb_params.h
 *
 * ActivMedia robot parameters, automatically generated by saphconv.tcl from 
 * Saphira parameter files:
 *    amigo.p
 *    p2at.p
 *    p2ce.p
 *    p2de.p
 *    p2dx.p
 *    p2it.p
 *    p2pb.p
 *    p2pp.p
 *    pion1m.p
 *    pion1x.p
 *    pionat.p
 *    robocup.p
*/

#ifndef _REB_PARAMS_H
#define _REB_PARAMS_H


#include <player.h>

void initialize_reb_params(void);

#define PLAYER_NUM_UBOT_ROBOT_TYPES 1

// this is the position of the IR sensor in robot-centric coords (mm,mm,deg)
typedef struct {
  int ir_x;
  int ir_y;
  int ir_theta;
} ir_pose_t;

// here are some parameters for the ubot
typedef struct {
  char *Class;
  char *Subclass;
  int MaxVelocity; // max translational velocity in mm/s
  int MaxRVelocity; // max rotational velocity in deg/s
  int RobotRadius; // radius in mm
  int RobotAxleLength; // length from wheel contact to contact in mm
  int IRNum; // for completeness? should be equal to PLAYER_REB_NUM_IR_SENSORS
  unsigned short IRPeriod; // time in ms between taking IR readings
  double PulsesPerMM; // number of pulses per MM
  long PulsesPerMMF; // fixed point of previous (previous * REB_FIXED_FACTOR)
  double MMPerPulses; // for completeness, inverse of previous, reduce # of floating ops
  long MMPerPulsesF;
  double PulsesPerMMMS; // previous constants adjusted for time factor in velocity
  long PulsesPerMMMSF;
  double MMPerPulsesMS;
  long MMPerPulsesMSF;
  ir_pose_t ir_pose[PLAYER_IR_MAX_SAMPLES];
} UBotRobotParams_t;
  
extern UBotRobotParams_t PlayerUBotRobotParams[];

#endif
