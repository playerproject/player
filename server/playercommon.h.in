/*
 *  Player - One Hell of a Robot Server
 *  Copyright (C) 2000  
 *     Brian Gerkey, Kasper Stoy, Richard Vaughan, & Andrew Howard
 *                      
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

/*
 * $Id$
 * 
 * DO NOT MODIFY THIS FILE!
 * Modify playercommon.h.in instead.
 *
 * common standard types and some generic size stuff.
 * also, debugging stuff.
 */

#ifndef _PLAYERCOMMON_H
#define _PLAYERCOMMON_H

/*****************************************************************************/
/* Don't touch these.  They are replaced during the configure with the right
 * values for the build system.  That way, the installed version of this
 * header will be usable by anyone */
#undef HAVE_STDINT_H
#undef HAVE_STRINGS_H
#undef WORDS_BIGENDIAN
#undef PLAYER_BIG_MESSAGES
/*****************************************************************************/

/* the largest possible message that the server will currently send
 * or receive */
#ifdef PLAYER_BIG_MESSAGES
#define PLAYER_MAX_MESSAGE_SIZE 2097152 /*2MB*/
#else
#define PLAYER_MAX_MESSAGE_SIZE 8192 /*8KB*/
#endif


/* make sure we get the various types like 'uint8_t' */
#include <sys/types.h>
#if HAVE_STDINT_H
  #include <stdint.h>
#endif

/* one of the following will define PATH_MAX */
#include <limits.h> 
#include <sys/param.h>

//cygwin doesn't appear to have them 
//typedef unsigned int size_t; 
//typedef unsigned int uint32_t;
//typedef unsigned short uint16_t;
//typedef unsigned char uint8_t;
//typedef int int32_t;
//typedef short int16_t;
//typedef char int8_t;

/* debug malloc(3) */
/* this should *not* be defined by default, because, as the man page says,
 * it causes "a special (less  efficient) implementation" of malloc() to be
 * used - BPG
 */
//#define MALLOC_CHECK_ 2

/* now, then.  we'll all use the following (ISO-endorsed) types:
 *
 * int8_t  : signed 1 byte  (char)
 * int16_t : signed 2 bytes (short)
 * int32_t : signed 4 bytes (int)
 * int64_t : signed 8 bytes (long)
 * 
 * uint8_t  : unsigned 1 byte  (unsigned char)
 * uint16_t : unsigned 2 bytes (unsigned short)
 * uint32_t : unsigned 4 bytes (unsigned int)
 * uint64_t : unsigned 8 bytes (unsigned long)
 */

/*
 * the following macros can be used to get the first char, short, or int
 * out of an unstructured buffer (such as a void* that contains a struct
 * of unknown type).
 */
#define GETFIRSTUINT8(x)  (*((uint8_t*)x))
#define GETFIRSTINT8(x)   (*((int8_t*)x))
#define GETFIRSTUINT16(x) (*((uint16_t*)x))
#define GETFIRSTINT16(x)  (*((int16_t*)x))
#define GETFIRSTUINT32(x) (*((uint32_t*)x))
#define GETFIRSTINT32(x)  (*((int32_t*)x))

/*
 * 64-bit conversion macros
 */
#if WORDS_BIGENDIAN
  #define htonll(n) (n)
#else
  #define htonll(n) ((((unsigned long long) htonl(n)) << 32) + htonl((n) >> 32))
#endif

#if WORDS_BIGENDIAN
  #define ntohll(n) (n)
#else
  #define ntohll(n) ((((unsigned long long)ntohl(n)) << 32) + ntohl((n) >> 32))
#endif


#define MAX_FILENAME_SIZE PATH_MAX

////////////////////////////////////////////////////////////////////////////////
// Maths stuff

#ifndef M_PI
	#define M_PI        3.14159265358979323846
#endif

// Convert radians to degrees
//
#define RTOD(r) ((r) * 180 / M_PI)

// Convert degrees to radians
//
#define DTOR(d) ((d) * M_PI / 180)

// Normalize angle to domain -pi, pi
//
#define NORMALIZE(z) atan2(sin(z), cos(z))

#define LOBYTE(w) ((uint8_t) (w & 0xFF))
#define HIBYTE(w) ((uint8_t) ((w >> 8) & 0xFF))
#define MAKEUINT16(lo, hi) ((((uint16_t) (hi)) << 8) | ((uint16_t) (lo)))

#ifndef BOOL
	#define BOOL int
#endif

#ifndef TRUE
	#define TRUE true
#endif

#ifndef FALSE
	#define FALSE false
#endif

////////////////////////////////////////////////////////////////////////////////
// Array checking macros

// Macro for returning array size
//
#ifndef ARRAYSIZE
	// Note that the cast to int is used to suppress warning about
	// signed/unsigned mismatches.
	#define ARRAYSIZE(x) (int) (sizeof(x) / sizeof(x[0]))
#endif

// Macro for checking array bounds
//
#define ASSERT_INDEX(index, array) \
    assert((size_t) (index) >= 0 && (size_t) (index) < sizeof(array) / sizeof(array[0]));


////////////////////////////////////////////////////////////////////////////////
// Misc useful stuff

#define min(a, b) ((a) < (b) ? (a) : (b))
#define max(a, b) ((a) > (b) ? (a) : (b))


////////////////////////////////////////////////////////////////////////////////
// Error, msg, trace macros

#include <assert.h>

#define VERIFY(m) assert(m)

#include <stdio.h>

// Error macros

#define PLAYER_ERROR_NULL(m) \
    fprintf(stderr, "%s\n", m)

#define PLAYER_ERROR(m) \
    fprintf(stderr, "error %s:%d : "m"\n", __FILE__, __LINE__)

#define PLAYER_ERROR1(m, a) \
    fprintf(stderr, "error %s:%d : "m"\n", __FILE__, __LINE__, a)

#define PLAYER_ERROR2(m, a, b) \
    fprintf(stderr, "error %s:%d : "m"\n", __FILE__, __LINE__, a, b)

#define PLAYER_ERROR3(m, a, b, c) \
    fprintf(stderr, "error %s:%d : "m"\n", __FILE__, __LINE__, a, b, c)

#define PLAYER_ERROR4(m, a, b, c, d) \
    fprintf(stderr, "error %s:%d : "m"\n", __FILE__, __LINE__, a, b, c, d)


// Warning macros
#define PLAYER_WARN(m) \
    fprintf(stderr, "warning %s:%d : "m"\n", __FILE__, __LINE__)

#define PLAYER_WARN1(m, a) \
    fprintf(stderr, "warning %s:%d : "m"\n", __FILE__, __LINE__, a)

#define PLAYER_WARN2(m, a, b) \
    fprintf(stderr, "warning %s:%d : "m"\n", __FILE__, __LINE__, a, b)

#define PLAYER_WARN3(m, a, b, c) \
    fprintf(stderr, "warning %s:%d : "m"\n", __FILE__, __LINE__, a, b, c)

#define PLAYER_WARN4(m, a, b, c, d) \
    fprintf(stderr, "warning %s:%d : "m"\n", __FILE__, __LINE__, a, b, c, d)


#if PLAYER_ENABLE_MSG

#define PLAYER_MSG0(m)             fprintf(stderr, "%s : "m"\n", __FILE__)   
#define PLAYER_MSG1(m, a)          fprintf(stderr, "%s : "m"\n", __FILE__, a)
#define PLAYER_MSG2(m, a, b)       fprintf(stderr, "%s : "m"\n", __FILE__, a, b)
#define PLAYER_MSG3(m, a, b, c)    fprintf(stderr, "%s : "m"\n", __FILE__, a, b, c) 
#define PLAYER_MSG4(m, a, b, c, d) fprintf(stderr, "%s : "m"\n", __FILE__, a, b, c, d)
#else

#define PLAYER_MSG0(m)
#define PLAYER_MSG1(m, a)
#define PLAYER_MSG2(m, a, b)
#define PLAYER_MSG3(m, a, b, c)
#define PLAYER_MSG4(m, a, b, c, d)

#endif

#if PLAYER_ENABLE_TRACE

#define PLAYER_TRACE(m) \
    fprintf(stderr, "debug : %s %s\n        "m"\n", __FILE__, __FUNCTION__) 

#define PLAYER_TRACE0(m)             fprintf(stderr, "debug : %s %s\n        "m"\n", \
                                            __FILE__, __FUNCTION__) 
#define PLAYER_TRACE1(m, a)          fprintf(stderr, "debug : %s %s\n        "m"\n", \
                                            __FILE__, __FUNCTION__, a)
#define PLAYER_TRACE2(m, a, b)       fprintf(stderr, "debug : %s %s\n        "m"\n", \
                                            __FILE__, __FUNCTION__, a, b)
#define PLAYER_TRACE3(m, a, b, c)    fprintf(stderr, "debug : %s %s\n        "m"\n", \
                                            __FILE__, __FUNCTION__, a, b, c)
#define PLAYER_TRACE4(m, a, b, c, d) fprintf(stderr, "debug : %s %s\n        "m"\n", \
                                            __FILE__, __FUNCTION__, a, b, c, d)

#else

#define PLAYER_TRACE0(m)
#define PLAYER_TRACE1(m, a)
#define PLAYER_TRACE2(m, a, b)
#define PLAYER_TRACE3(m, a, b, c)
#define PLAYER_TRACE4(m, a, b, c, d)

#endif



#endif
