#!/usr/bin/tclsh

#
# $Id$
#
# a little script to generate the C code for Player's
# serialization/deserialization library.  expects
# player.h on stdin and overwrites serialize.[ch].
#

#
# TODO:
#  - add array support
#  - remove floats from player.h

if {($argc < 1) || ([lindex $argv 0] == "-")} {
  set fd stdin
} else {
  set fname [lindex $argv 0]
  set fd [open $fname r]
}

set sfd [open "serialize.c" w]
set hfd [open "serialize.h" w]

set boilerplate \
"/*
  * \$Id\$
  *
  * This file automatically generated by $env(USER) at: 
  *   [clock format [clock seconds]]
  */\n\n"

puts $hfd $boilerplate
puts $sfd $boilerplate

puts $hfd "#ifndef SERIALIZE_H"
puts $hfd "#define SERIALIZE_H\n"
puts $hfd "#ifdef __cplusplus"
puts $hfd "extern \"C\" \{"
puts $hfd "#endif\n"

puts $sfd "#include <player.h>"
puts $sfd "#include <serialize.h>\n"
puts $sfd "#include <netinet/in.h>"
puts $sfd "#include <string.h>\n\n"

set state "out"

while {![eof $fd]} {
  set line [string trimleft [gets $fd]]
  if {[string index $line 0] == "*"} {continue}

  set idx [string first "//" $line]
  if {$idx >= 0} {set line [string range $line 0 [expr $idx - 1]]}
  set idx [string first "/*" $line]
  if {$idx >= 0} {set line [string range $line 0 [expr $idx - 1]]}
  set idx [string first "\;" $line]
  if {$idx >= 0} {set line [string range $line 0 [expr $idx - 1]]}
  set idx [string first "\[" $line]
  if {$idx >= 0} {continue}
  if {![string length $line]} {continue}

  if {$state == "out"} {
    if {[string index $line 0] == "\{"} {
      set state "in"
      set i 0
      array set fields {}
    }
  } elseif {$state == "in"} {
    if {[string index $line 0] == "\}"} {
      set structname [lindex $line end]
      set funcname $structname
      set idx [expr [string length $funcname] - 2]
      if {[string range $funcname $idx end] == "_t"} {
        set funcname [string range $funcname 0 [expr $idx - 1]]
      }
      set buffer ""
      set needswapped 0
      puts $hfd "int player_ser_${funcname}(void* dest, $structname src)\;\n"
      puts $sfd "int\nplayer_ser_${funcname}(void* dest, $structname src)"
      puts $sfd "\{\n  int i = 0\;"
      set j 0
      while {$j < $i} {
        if {($fields($j,type) == "uint8_t") || 
            ($fields($j,type) == "int8_t")} {
          append buffer "  memcpy(((char*)dest)+i, &(src.$fields($j,name)), sizeof(uint8_t))\;\n"
          append buffer "  i += sizeof(uint8_t)\;\n"
        } elseif {($fields($j,type) == "uint16_t") || 
                  ($fields($j,type) == "int16_t")} {
          set needswapped 1
          append buffer "  swappedsrc.$fields($j,name) = htons(src.$fields($j,name))\;\n"
          append buffer "  memcpy(((char*)dest)+i, &(swappedsrc.$fields($j,name)), sizeof(uint16_t))\;\n"
          append buffer "  i += sizeof(uint16_t)\;\n"
        } elseif {($fields($j,type) == "uint32_t") || 
                  ($fields($j,type) == "int32_t")} {
          set needswapped 1
          append buffer "  swappedsrc.$fields($j,name) = htonl(src.$fields($j,name))\;\n"
          append buffer "  memcpy(((char*)dest)+i, &(swappedsrc.$fields($j,name)), sizeof(uint32_t))\;\n"
          append buffer "  i += sizeof(uint32_t)\;\n"
        } else {
          set tmpname $fields($j,type)
          set idx [expr [string length $tmpname] - 2]
          if {[string range $tmpname $idx end] == "_t"} {
            set tmpname [string range $tmpname 0 [expr $idx - 1]]
          }
          append buffer "  i += player_ser_${tmpname}(((char*)dest)+i, src.$fields($j,name))\;"
        }
        incr j
      }
      if {$needswapped} {
       puts $sfd "  $structname swappedsrc\;"  
      }
      puts $sfd "\n$buffer"
      puts $sfd "\n  return(i)\;"
      puts $sfd "\}"
      
      puts $hfd "int player_deser_${funcname}($structname* dest, void* src)\;\n"
      puts $sfd "int\nplayer_deser_${funcname}($structname* dest, void* src)"
      puts $sfd "\{\n  int i = 0\;\n"
      set j 0
      while {$j < $i} {
        if {($fields($j,type) == "uint8_t") || 
            ($fields($j,type) == "int8_t")} {
          puts $sfd "  memcpy(&(dest->$fields($j,name)), ((char*)src)+i, sizeof(uint8_t))\;"
          puts $sfd "  i += sizeof(uint8_t)\;"
        } elseif {($fields($j,type) == "uint16_t") || 
                  ($fields($j,type) == "int16_t")} {
          puts $sfd "  memcpy(&(dest->$fields($j,name)), ((char*)src)+i, sizeof(uint16_t))\;"
          puts $sfd "  dest->$fields($j,name) = ntohs(dest->$fields($j,name))\;"
          puts $sfd "  i += sizeof(uint16_t)\;"
        } elseif {($fields($j,type) == "uint32_t") || 
                  ($fields($j,type) == "int32_t")} {
          puts $sfd "  memcpy(&(dest->$fields($j,name)), ((char*)src)+i, sizeof(uint32_t))\;"
          puts $sfd "  dest->$fields($j,name) = ntohl(dest->$fields($j,name))\;"
          puts $sfd "  i += sizeof(uint32_t)\;"
        } else {
          set tmpname $fields($j,type)
          set idx [expr [string length $tmpname] - 2]
          if {[string range $tmpname $idx end] == "_t"} {
            set tmpname [string range $tmpname 0 [expr $idx - 1]]
          }
          puts $sfd "  i += player_deser_${tmpname}(&(dest->$fields($j,name)), ((char*)src)+i)\;"
        }
        incr j
      }
      puts $sfd "\n  return(i)\;"
      puts $sfd "\}\n"

      set i 0
      set state "out"
    } else {
      set j 0
      set type [lindex $line 0]
      if {($type == "float")} {
        puts "WARNING: ignoring \"float\""
        continue
      }
      set line [split [lrange $line 1 end] ,]
      while {$j < [llength $line]} {
        set fields($i,type) $type
        set fields($i,name) [string trimleft [lindex $line $j]]
        incr j
        incr i
      }
    }
  }
}

puts $hfd "#ifdef __cplusplus"
puts $hfd "\}"
puts $hfd "#endif\n"

puts $hfd "#endif"

close $sfd
close $hfd
